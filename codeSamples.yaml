overlay: 1.0.0
info:
  title: CodeSamples overlay for typescript target
  version: 0.0.0
actions:
  - target: $["paths"]["/ats/scorecard"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsScorecard
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.scorecard.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/location/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisLocation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.location.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/drives/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageDrive
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.drives.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.contacts.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/linked-users"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createLinkedUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.linkedUsers.create({
                linkedUserOriginId: "<value>",
                alias: "<value>",
                idProject: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/candidate/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsCandidate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.candidate.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/department/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsDepartment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.department.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/event/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationEvent
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.event.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/creditnote"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingCreditNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.creditnote.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/journalentry"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingJournalEntry
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.journalentry.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/companies/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmCompany
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.companies.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/trackingcategory"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingTrackingCategorys
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.trackingcategory.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employerbenefit"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployerBenefit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.employerbenefit.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/action"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationAction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.action.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationActionInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/files"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createFilestorageFile
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.files.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedFilestorageFileInput: {
                  name: "<value>",
                  fileUrl: "<value>",
                  mimeType: "<value>",
                  size: "<value>",
                  folderId: "<value>",
                  permission: "<value>",
                  sharedLink: "<value>",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/contact"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.contact.create({
                xConnectionToken: "<value>",
                unifiedAccountingContactInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/journalentry"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingJournalEntry
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.journalentry.create({
                xConnectionToken: "<value>",
                unifiedAccountingJournalentryInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/webhook"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listWebhooks
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.webhook.list();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/sync/resync"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: resync
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.sync.resync();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/action/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationAction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.action.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/transaction"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingTransaction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.transaction.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/contact/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.contact.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/incomestatement"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingIncomeStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.incomestatement.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/attachment"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.attachment.create({
                xConnectionToken: "<value>",
                unifiedAccountingAttachmentInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/attachment/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.attachment.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/address/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAddress
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.address.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/webhook/{id}"]["put"]
    update:
      x-codeSamples:
        - lang: typescript
          label: updateStatus
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.webhook.updateStatus({
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.attachments.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/notes"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.notes.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/list/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationList
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.list.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/template"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationTemplate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.template.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationTemplateInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/expense/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingExpense
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.expense.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/payment"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingPayment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.payment.create({
                xConnectionToken: "<value>",
                unifiedAccountingPaymentInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/webhook/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: typescript
          label: delete
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.webhook.delete({
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createCrmContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.contacts.create({
                xConnectionToken: "<value>",
                unifiedCrmContactInput: {
                  firstName: "Jed",
                  lastName: "Kuhn",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/account/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.account.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/eeocs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsEeocs
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.eeocs.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/address"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingAddress
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.address.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/group/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.group.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/list"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationLists
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.list.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/health"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: health
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.health();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/office"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsOffice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.office.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/notes/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.notes.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/linked-users/batch"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: importBatch
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.linkedUsers.importBatch({
                linkedUserOriginIds: [
                  "<value>",
                ],
                alias: "<value>",
                idProject: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employerbenefit/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployerBenefit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.employerbenefit.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/location"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisLocation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.location.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/attachment"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingAttachments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.attachment.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/companyinfo/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCompanyInfo
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.companyinfo.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/dependent"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisDependents
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.dependent.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employment"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.employment.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/benefit/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisBenefit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.benefit.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/timeoffbalance"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisTimeoffbalance
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.timeoffbalance.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/department"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsDepartments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.department.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/companyinfo"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingCompanyInfos
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.companyinfo.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/contact"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.contact.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/rejectreason/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsRejectReason
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.rejectreason.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/company"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisCompanys
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.company.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/timeoff/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisTimeoff
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.timeoff.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/automation"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationAutomation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.automation.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationAutomationInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/item/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingItem
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.item.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hello
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hello();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/phonenumber/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPhonenumber
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.phonenumber.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/application"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAtsApplication
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.application.create({
                xConnectionToken: "<value>",
                unifiedAtsApplicationInput: {
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/automation"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationAutomation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.automation.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/campaign"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationCampaign
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.campaign.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationCampaignInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/message"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationMessages
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.message.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/purchaseorder"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingPurchaseOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.purchaseorder.create({
                xConnectionToken: "<value>",
                unifiedAccountingPurchaseorderInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/trackingcategory/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTrackingCategory
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.trackingcategory.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/scorecard/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsScorecard
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.scorecard.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/eeocs"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsEeocs
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.eeocs.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/balancesheet/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingBalanceSheet
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.balancesheet.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/folders"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createFilestorageFolder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.folders.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedFilestorageFolderInput: {
                  name: "<value>",
                  size: "<value>",
                  folderUrl: "<value>",
                  description: "Multi-tiered human-resource model",
                  driveId: "<value>",
                  parentFolderId: "<value>",
                  sharedLink: "<value>",
                  permission: "<value>",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/collections"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingCollections
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.collections.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/bankinfo"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisBankinfo
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.bankinfo.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employee"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployee
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.employee.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/user/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingAutomationUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.user.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.users.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/companies"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createCrmCompany
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.companies.create({
                xConnectionToken: "<value>",
                unifiedCrmCompanyInput: {
                  name: "<value>",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/interview/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsInterview
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.interview.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/comments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingComment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.comments.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/paygroup"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisPaygroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.paygroup.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/creditnote/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCreditNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.creditnote.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/email/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationEmail
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.email.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/tickets"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingTicket
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.tickets.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/comments"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createTicketingComment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.comments.create({
                xConnectionToken: "<value>",
                unifiedTicketingCommentInput: {
                  body: "<value>",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/action"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationAction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.action.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/office/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsOffice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.office.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/item"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingItem
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.item.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/cashflowstatement/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCashflowStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.cashflowstatement.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/payment"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingPayment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.payment.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.users.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/comments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingComments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.comments.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/linked-users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listLinkedUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.linkedUsers.list();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employee"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createHrisEmployee
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.employee.create({
                xConnectionToken: "<value>",
                unifiedHrisEmployeeInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/timeoff"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createHrisTimeoff
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.timeoff.create({
                xConnectionToken: "<value>",
                unifiedHrisTimeoffInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/phonenumber"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingPhonenumber
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.phonenumber.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/deals"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createCrmDeal
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.deals.create({
                xConnectionToken: "<value>",
                unifiedCrmDealInput: {
                  name: "<value>",
                  description: "Multi-tiered human-resource model",
                  amount: 8592.13,
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/activity/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsActivity
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.activity.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/application"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsApplication
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.application.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/collections/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCollection
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.collections.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/user/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.user.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/invoice"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingInvoice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.invoice.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.groups.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.users.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/folders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageFolder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.folders.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/teams"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingTeams
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.teams.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/engagements"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmEngagements
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.engagements.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/passthrough"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: request
          source: |-
            import { Panora } from "@panora/sdk";
            import { Method } from "@panora/sdk/models/components";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.passthrough.request({
                integrationId: "<value>",
                linkedUserId: "<value>",
                vertical: "<value>",
                passThroughRequestDto: {
                  method: Method.Get,
                  path: "/dev",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/candidate"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsCandidate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.candidate.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employeepayrollrun"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployeePayrollRun
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.employeepayrollrun.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/offer/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsOffer
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.offer.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/account"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.account.create({
                xConnectionToken: "<value>",
                unifiedAccountingAccountInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/balancesheet"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingBalanceSheets
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.balancesheet.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/expense"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingExpense
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.expense.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employeepayrollrun/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployeePayrollRun
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.employeepayrollrun.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/transaction/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTransaction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.transaction.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/campaign/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationCampaign
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.campaign.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/engagements"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createCrmEngagement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.engagements.create({
                xConnectionToken: "<value>",
                unifiedCrmEngagementInput: {
                  type: "<value>",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/tasks/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmTask
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.tasks.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.users.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/stages"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmStages
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.stages.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/tag"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsTags
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.tag.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/folders"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listFilestorageFolder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.folders.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/event"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationEvents
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.event.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/tag/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsTag
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.tag.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/message/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationMessage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.message.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/taxrate/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTaxRate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.taxrate.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/tickets"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createTicketingTicket
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.tickets.create({
                xConnectionToken: "<value>",
                unifiedTicketingTicketInput: {
                  name: "<value>",
                  description: "Multi-tiered human-resource model",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/notes"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createCrmNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.notes.create({
                xConnectionToken: "<value>",
                unifiedCrmNoteInput: {
                  content: "<value>",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/automation/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationAutomation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.automation.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/campaign"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationCampaign
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.campaign.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/linked-users/fromRemoteId"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: remoteId
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.linkedUsers.remoteId({
                remoteId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/purchaseorder/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPurchaseOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.purchaseorder.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/invoice"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingInvoice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.invoice.create({
                xConnectionToken: "<value>",
                unifiedAccountingInvoiceInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.contacts.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/offer"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsOffer
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.offer.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/vendorcredit"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingVendorCredit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.vendorcredit.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/files"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listFilestorageFile
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.files.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/invoice/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingInvoice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.invoice.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/field-mappings/define"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: define
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.fieldMappings.define({
                objectTypeOwner: "<value>",
                name: "<value>",
                description: "Optimized object-oriented emulation",
                dataType: "float",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/field-mappings/map"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: map
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.fieldMappings.map({
                attributeId: "<value>",
                sourceCustomFieldId: "<value>",
                sourceProvider: "<value>",
                linkedUserId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/account"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingAccounts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.account.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/cashflowstatement"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingCashflowStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.cashflowstatement.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/contact"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.contact.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.accounts.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/attachment"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.attachment.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/user"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.user.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/tags/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTag
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.tags.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employment/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.employment.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/template/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationTemplate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.template.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/stages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmStage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.stages.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.users.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/bankinfo/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisBankinfo
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.bankinfo.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/purchaseorder"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingPurchaseOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.purchaseorder.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/vendorcredit/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingVendorCredit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.vendorcredit.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/field-mappings"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: create
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.fieldMappings.create({
                objectTypeOwner: "<value>",
                name: "<value>",
                description: "Multi-tiered human-resource model",
                dataType: "enum",
                sourceCustomFieldId: "<value>",
                sourceProvider: "<value>",
                linkedUserId: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/timeoffbalance/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisTimeoffbalance
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.timeoffbalance.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/interview"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsInterview
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.interview.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/email"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationEmails
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.email.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/paygroup/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisPaygroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.paygroup.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/payrollrun"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisPayrollRuns
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.payrollrun.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/webhook/verifyEvent"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: verifyEvent
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.webhook.verifyEvent({
                payload: {},
                signature: "<value>",
                secret: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.accounts.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/job/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsJob
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.job.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/taxrate"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingTaxRate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.taxrate.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/drives"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listFilestorageDrives
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.drives.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/tickets/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTicket
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.tickets.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/deals"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmDeals
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.deals.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employee/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployee
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.employee.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/activity"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAtsActivity
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.activity.create({
                xConnectionToken: "<value>",
                unifiedAtsActivityInput: {
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/activity"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsActivity
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.activity.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/job"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsJob
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.job.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/teams/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTeam
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.teams.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/contact"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createMarketingAutomationContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.contact.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationContactInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/webhook"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createWebhook
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.webhook.create({
                url: "http://limp-pastry.org",
                description: "Inverse discrete benchmark",
                scope: [
                  "<value>",
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/companies"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmCompany
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.companies.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/tasks"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmTask
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.tasks.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/contact/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingAutomationContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.contact.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/journalentry/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingJournalEntry
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.journalentry.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/payment/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPayment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.payment.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/candidate"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAtsCandidate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.candidate.create({
                xConnectionToken: "<value>",
                unifiedAtsCandidateInput: {
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/list"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationList
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.list.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationListInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createTicketingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.attachments.create({
                xConnectionToken: "<value>",
                unifiedTicketingAttachmentInput: {
                  fileName: "your_file_here",
                  fileUrl: "<value>",
                  uploader: "<value>",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/attachment/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.attachment.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/tasks"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createCrmTask
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.tasks.create({
                xConnectionToken: "<value>",
                unifiedCrmTaskInput: {
                  subject: "<value>",
                  content: "<value>",
                  status: "<value>",
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/application/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsApplication
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.application.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/jobinterviewstage/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsJobInterviewStage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.jobinterviewstage.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/linked-users/single"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveLinkedUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.linkedUsers.retrieve({
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/attachment"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAtsAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.attachment.create({
                xConnectionToken: "<value>",
                unifiedAtsAttachmentInput: {
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/jobinterviewstage"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsJobInterviewStage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.jobinterviewstage.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingAttachments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.attachments.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/group"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.group.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/dependent/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisDependent
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.dependent.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/expense"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingExpense
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.expense.create({
                xConnectionToken: "<value>",
                unifiedAccountingExpenseInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/incomestatement/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingIncomeStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.accounting.incomestatement.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listFilestorageUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.users.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/tags"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingTags
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ticketing.tags.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/benefit"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisBenefit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.benefit.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/interview"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAtsInterview
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.interview.create({
                xConnectionToken: "<value>",
                unifiedAtsInterviewInput: {
                  fieldMappings: {},
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/deals/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmDeal
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.deals.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/files/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageFile
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.files.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/groups"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listFilestorageGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.filestorage.groups.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/sync/status/{vertical}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: status
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.sync.status({
                vertical: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/timeoff"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisTimeoffs
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.hris.timeoff.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/template"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationTemplates
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.marketingautomation.template.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/engagements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmEngagement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.crm.engagements.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/rejectreason"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsRejectReasons
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.rejectreason.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/user"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              bearer: process.env.BEARER,
            });

            async function run() {
              const result = await panora.ats.user.list({
                xConnectionToken: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
