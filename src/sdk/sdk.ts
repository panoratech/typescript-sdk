/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { HTTPClient } from "../lib/http.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity } from "../lib/security.js";
import * as operations from "../models/operations/index.js";
import { Accounting } from "./accounting.js";
import { Ats } from "./ats.js";
import { Crm } from "./crm.js";
import { FieldMappings } from "./fieldmappings.js";
import { Filestorage } from "./filestorage.js";
import { Hris } from "./hris.js";
import { LinkedUsers } from "./linkedusers.js";
import { Marketingautomation } from "./marketingautomation.js";
import { Passthrough } from "./passthrough.js";
import { Sync } from "./sync.js";
import { Ticketing } from "./ticketing.js";
import { Webhooks } from "./webhooks.js";

export class Panora extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _webhooks?: Webhooks;
    get webhooks(): Webhooks {
        return (this._webhooks ??= new Webhooks(this.options$));
    }

    private _ticketing?: Ticketing;
    get ticketing(): Ticketing {
        return (this._ticketing ??= new Ticketing(this.options$));
    }

    private _sync?: Sync;
    get sync(): Sync {
        return (this._sync ??= new Sync(this.options$));
    }

    private _crm?: Crm;
    get crm(): Crm {
        return (this._crm ??= new Crm(this.options$));
    }

    private _linkedUsers?: LinkedUsers;
    get linkedUsers(): LinkedUsers {
        return (this._linkedUsers ??= new LinkedUsers(this.options$));
    }

    private _fieldMappings?: FieldMappings;
    get fieldMappings(): FieldMappings {
        return (this._fieldMappings ??= new FieldMappings(this.options$));
    }

    private _passthrough?: Passthrough;
    get passthrough(): Passthrough {
        return (this._passthrough ??= new Passthrough(this.options$));
    }

    private _hris?: Hris;
    get hris(): Hris {
        return (this._hris ??= new Hris(this.options$));
    }

    private _marketingautomation?: Marketingautomation;
    get marketingautomation(): Marketingautomation {
        return (this._marketingautomation ??= new Marketingautomation(this.options$));
    }

    private _ats?: Ats;
    get ats(): Ats {
        return (this._ats ??= new Ats(this.options$));
    }

    private _accounting?: Accounting;
    get accounting(): Accounting {
        return (this._accounting ??= new Accounting(this.options$));
    }

    private _filestorage?: Filestorage;
    get filestorage(): Filestorage {
        return (this._filestorage ??= new Filestorage(this.options$));
    }

    async hello(options?: RequestOptions): Promise<operations.HelloResponse> {
        const path$ = this.templateURLComponent("/")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const bearer$ = await extractSecurity(this.options$.bearer);
        const security$ = bearer$ == null ? {} : { bearer: bearer$ };
        const context = {
            operationID: "hello",
            oAuth2Scopes: [],
            securitySource: this.options$.bearer,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.HelloResponse>()
            .void(200, operations.HelloResponse$inboundSchema)
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    async health(options?: RequestOptions): Promise<operations.HealthResponse> {
        const path$ = this.templateURLComponent("/health")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const bearer$ = await extractSecurity(this.options$.bearer);
        const security$ = bearer$ == null ? {} : { bearer: bearer$ };
        const context = {
            operationID: "health",
            oAuth2Scopes: [],
            securitySource: this.options$.bearer,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.HealthResponse>()
            .void(200, operations.HealthResponse$inboundSchema)
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }
}
