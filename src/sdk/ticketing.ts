/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { HTTPClient } from "../lib/http.js";
import { ClientSDK } from "../lib/sdks.js";
import { Accounts } from "./accounts.js";
import { Collections } from "./collections.js";
import { Comments } from "./comments.js";
import { Contacts } from "./contacts.js";
import { PanoraTicketingAttachments } from "./panoraticketingattachments.js";
import { Tags } from "./tags.js";
import { Teams } from "./teams.js";
import { Tickets } from "./tickets.js";
import { Users } from "./users.js";

export class Ticketing extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _tickets?: Tickets;
    get tickets(): Tickets {
        return (this._tickets ??= new Tickets(this.options$));
    }

    private _users?: Users;
    get users(): Users {
        return (this._users ??= new Users(this.options$));
    }

    private _accounts?: Accounts;
    get accounts(): Accounts {
        return (this._accounts ??= new Accounts(this.options$));
    }

    private _contacts?: Contacts;
    get contacts(): Contacts {
        return (this._contacts ??= new Contacts(this.options$));
    }

    private _collections?: Collections;
    get collections(): Collections {
        return (this._collections ??= new Collections(this.options$));
    }

    private _comments?: Comments;
    get comments(): Comments {
        return (this._comments ??= new Comments(this.options$));
    }

    private _tags?: Tags;
    get tags(): Tags {
        return (this._tags ??= new Tags(this.options$));
    }

    private _teams?: Teams;
    get teams(): Teams {
        return (this._teams ??= new Teams(this.options$));
    }

    private _attachments?: PanoraTicketingAttachments;
    get attachments(): PanoraTicketingAttachments {
        return (this._attachments ??= new PanoraTicketingAttachments(this.options$));
    }
}
