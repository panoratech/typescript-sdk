/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { HTTPClient } from "../lib/http.js";
import { ClientSDK } from "../lib/sdks.js";
import { Addresses } from "./addresses.js";
import { Balancesheets } from "./balancesheets.js";
import { Cashflowstatements } from "./cashflowstatements.js";
import { Companyinfos } from "./companyinfos.js";
import { Creditnotes } from "./creditnotes.js";
import { Expenses } from "./expenses.js";
import { Incomestatements } from "./incomestatements.js";
import { Invoices } from "./invoices.js";
import { Items } from "./items.js";
import { Journalentries } from "./journalentries.js";
import { PanoraAccountingContacts } from "./panoraaccountingcontacts.js";
import { PanoraAccounts } from "./panoraaccounts.js";
import { PanoraAttachments } from "./panoraattachments.js";
import { Payments } from "./payments.js";
import { Phonenumbers } from "./phonenumbers.js";
import { Purchaseorders } from "./purchaseorders.js";
import { Taxrates } from "./taxrates.js";
import { Trackingcategories } from "./trackingcategories.js";
import { Transactions } from "./transactions.js";
import { Vendorcredits } from "./vendorcredits.js";

export class Accounting extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _accounts?: PanoraAccounts;
    get accounts(): PanoraAccounts {
        return (this._accounts ??= new PanoraAccounts(this.options$));
    }

    private _addresses?: Addresses;
    get addresses(): Addresses {
        return (this._addresses ??= new Addresses(this.options$));
    }

    private _attachments?: PanoraAttachments;
    get attachments(): PanoraAttachments {
        return (this._attachments ??= new PanoraAttachments(this.options$));
    }

    private _balancesheets?: Balancesheets;
    get balancesheets(): Balancesheets {
        return (this._balancesheets ??= new Balancesheets(this.options$));
    }

    private _cashflowstatements?: Cashflowstatements;
    get cashflowstatements(): Cashflowstatements {
        return (this._cashflowstatements ??= new Cashflowstatements(this.options$));
    }

    private _companyinfos?: Companyinfos;
    get companyinfos(): Companyinfos {
        return (this._companyinfos ??= new Companyinfos(this.options$));
    }

    private _contacts?: PanoraAccountingContacts;
    get contacts(): PanoraAccountingContacts {
        return (this._contacts ??= new PanoraAccountingContacts(this.options$));
    }

    private _creditnotes?: Creditnotes;
    get creditnotes(): Creditnotes {
        return (this._creditnotes ??= new Creditnotes(this.options$));
    }

    private _expenses?: Expenses;
    get expenses(): Expenses {
        return (this._expenses ??= new Expenses(this.options$));
    }

    private _incomestatements?: Incomestatements;
    get incomestatements(): Incomestatements {
        return (this._incomestatements ??= new Incomestatements(this.options$));
    }

    private _invoices?: Invoices;
    get invoices(): Invoices {
        return (this._invoices ??= new Invoices(this.options$));
    }

    private _items?: Items;
    get items(): Items {
        return (this._items ??= new Items(this.options$));
    }

    private _journalentries?: Journalentries;
    get journalentries(): Journalentries {
        return (this._journalentries ??= new Journalentries(this.options$));
    }

    private _payments?: Payments;
    get payments(): Payments {
        return (this._payments ??= new Payments(this.options$));
    }

    private _phonenumbers?: Phonenumbers;
    get phonenumbers(): Phonenumbers {
        return (this._phonenumbers ??= new Phonenumbers(this.options$));
    }

    private _purchaseorders?: Purchaseorders;
    get purchaseorders(): Purchaseorders {
        return (this._purchaseorders ??= new Purchaseorders(this.options$));
    }

    private _taxrates?: Taxrates;
    get taxrates(): Taxrates {
        return (this._taxrates ??= new Taxrates(this.options$));
    }

    private _trackingcategories?: Trackingcategories;
    get trackingcategories(): Trackingcategories {
        return (this._trackingcategories ??= new Trackingcategories(this.options$));
    }

    private _transactions?: Transactions;
    get transactions(): Transactions {
        return (this._transactions ??= new Transactions(this.options$));
    }

    private _vendorcredits?: Vendorcredits;
    get vendorcredits(): Vendorcredits {
        return (this._vendorcredits ??= new Vendorcredits(this.options$));
    }
}
