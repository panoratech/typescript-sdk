/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { HTTPClient } from "../lib/http.js";
import { ClientSDK } from "../lib/sdks.js";
import { Drives } from "./drives.js";
import { Files } from "./files.js";
import { Folders } from "./folders.js";
import { PanoraFilestorageUsers } from "./panorafilestorageusers.js";
import { PanoraGroups } from "./panoragroups.js";

export class Filestorage extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _drives?: Drives;
    get drives(): Drives {
        return (this._drives ??= new Drives(this.options$));
    }

    private _files?: Files;
    get files(): Files {
        return (this._files ??= new Files(this.options$));
    }

    private _folders?: Folders;
    get folders(): Folders {
        return (this._folders ??= new Folders(this.options$));
    }

    private _groups?: PanoraGroups;
    get groups(): PanoraGroups {
        return (this._groups ??= new PanoraGroups(this.options$));
    }

    private _users?: PanoraFilestorageUsers;
    get users(): PanoraFilestorageUsers {
        return (this._users ??= new PanoraFilestorageUsers(this.options$));
    }
}
