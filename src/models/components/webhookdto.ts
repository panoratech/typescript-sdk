/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WebhookDto = {
  /**
   * The endpoint url of the webhook.
   */
  url: string | null;
  /**
   * The description of the webhook.
   */
  description?: string | null | undefined;
  /**
   * The events that the webhook listen to.
   */
  scope: Array<string> | null;
};

/** @internal */
export const WebhookDto$inboundSchema: z.ZodType<
  WebhookDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  scope: z.nullable(z.array(z.string())),
});

/** @internal */
export type WebhookDto$Outbound = {
  url: string | null;
  description?: string | null | undefined;
  scope: Array<string> | null;
};

/** @internal */
export const WebhookDto$outboundSchema: z.ZodType<
  WebhookDto$Outbound,
  z.ZodTypeDef,
  WebhookDto
> = z.object({
  url: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  scope: z.nullable(z.array(z.string())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookDto$ {
  /** @deprecated use `WebhookDto$inboundSchema` instead. */
  export const inboundSchema = WebhookDto$inboundSchema;
  /** @deprecated use `WebhookDto$outboundSchema` instead. */
  export const outboundSchema = WebhookDto$outboundSchema;
  /** @deprecated use `WebhookDto$Outbound` instead. */
  export type Outbound = WebhookDto$Outbound;
}

export function webhookDtoToJSON(webhookDto: WebhookDto): string {
  return JSON.stringify(WebhookDto$outboundSchema.parse(webhookDto));
}

export function webhookDtoFromJSON(
  jsonString: string,
): SafeParseResult<WebhookDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookDto' from JSON`,
  );
}
