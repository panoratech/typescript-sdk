/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAccountingCreditNoteRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original software.
   */
  remoteData?: boolean | undefined;
  /**
   * Set to get the number of records.
   */
  limit?: number | undefined;
  /**
   * Set to get the number of records after this cursor.
   */
  cursor?: string | undefined;
};

export type ListAccountingCreditNoteResponseBody = {
  prevCursor: string | null;
  nextCursor: string | null;
  data: Array<components.UnifiedAccountingCreditnoteOutput>;
};

export type ListAccountingCreditNoteResponse = {
  result: ListAccountingCreditNoteResponseBody;
};

/** @internal */
export const ListAccountingCreditNoteRequest$inboundSchema: z.ZodType<
  ListAccountingCreditNoteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
  });
});

/** @internal */
export type ListAccountingCreditNoteRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const ListAccountingCreditNoteRequest$outboundSchema: z.ZodType<
  ListAccountingCreditNoteRequest$Outbound,
  z.ZodTypeDef,
  ListAccountingCreditNoteRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountingCreditNoteRequest$ {
  /** @deprecated use `ListAccountingCreditNoteRequest$inboundSchema` instead. */
  export const inboundSchema = ListAccountingCreditNoteRequest$inboundSchema;
  /** @deprecated use `ListAccountingCreditNoteRequest$outboundSchema` instead. */
  export const outboundSchema = ListAccountingCreditNoteRequest$outboundSchema;
  /** @deprecated use `ListAccountingCreditNoteRequest$Outbound` instead. */
  export type Outbound = ListAccountingCreditNoteRequest$Outbound;
}

export function listAccountingCreditNoteRequestToJSON(
  listAccountingCreditNoteRequest: ListAccountingCreditNoteRequest,
): string {
  return JSON.stringify(
    ListAccountingCreditNoteRequest$outboundSchema.parse(
      listAccountingCreditNoteRequest,
    ),
  );
}

export function listAccountingCreditNoteRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountingCreditNoteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAccountingCreditNoteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountingCreditNoteRequest' from JSON`,
  );
}

/** @internal */
export const ListAccountingCreditNoteResponseBody$inboundSchema: z.ZodType<
  ListAccountingCreditNoteResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prev_cursor: z.nullable(z.string()),
  next_cursor: z.nullable(z.string()),
  data: z.array(components.UnifiedAccountingCreditnoteOutput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "prev_cursor": "prevCursor",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListAccountingCreditNoteResponseBody$Outbound = {
  prev_cursor: string | null;
  next_cursor: string | null;
  data: Array<components.UnifiedAccountingCreditnoteOutput$Outbound>;
};

/** @internal */
export const ListAccountingCreditNoteResponseBody$outboundSchema: z.ZodType<
  ListAccountingCreditNoteResponseBody$Outbound,
  z.ZodTypeDef,
  ListAccountingCreditNoteResponseBody
> = z.object({
  prevCursor: z.nullable(z.string()),
  nextCursor: z.nullable(z.string()),
  data: z.array(components.UnifiedAccountingCreditnoteOutput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    prevCursor: "prev_cursor",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountingCreditNoteResponseBody$ {
  /** @deprecated use `ListAccountingCreditNoteResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ListAccountingCreditNoteResponseBody$inboundSchema;
  /** @deprecated use `ListAccountingCreditNoteResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ListAccountingCreditNoteResponseBody$outboundSchema;
  /** @deprecated use `ListAccountingCreditNoteResponseBody$Outbound` instead. */
  export type Outbound = ListAccountingCreditNoteResponseBody$Outbound;
}

export function listAccountingCreditNoteResponseBodyToJSON(
  listAccountingCreditNoteResponseBody: ListAccountingCreditNoteResponseBody,
): string {
  return JSON.stringify(
    ListAccountingCreditNoteResponseBody$outboundSchema.parse(
      listAccountingCreditNoteResponseBody,
    ),
  );
}

export function listAccountingCreditNoteResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountingCreditNoteResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAccountingCreditNoteResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountingCreditNoteResponseBody' from JSON`,
  );
}

/** @internal */
export const ListAccountingCreditNoteResponse$inboundSchema: z.ZodType<
  ListAccountingCreditNoteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListAccountingCreditNoteResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListAccountingCreditNoteResponse$Outbound = {
  Result: ListAccountingCreditNoteResponseBody$Outbound;
};

/** @internal */
export const ListAccountingCreditNoteResponse$outboundSchema: z.ZodType<
  ListAccountingCreditNoteResponse$Outbound,
  z.ZodTypeDef,
  ListAccountingCreditNoteResponse
> = z.object({
  result: z.lazy(() => ListAccountingCreditNoteResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountingCreditNoteResponse$ {
  /** @deprecated use `ListAccountingCreditNoteResponse$inboundSchema` instead. */
  export const inboundSchema = ListAccountingCreditNoteResponse$inboundSchema;
  /** @deprecated use `ListAccountingCreditNoteResponse$outboundSchema` instead. */
  export const outboundSchema = ListAccountingCreditNoteResponse$outboundSchema;
  /** @deprecated use `ListAccountingCreditNoteResponse$Outbound` instead. */
  export type Outbound = ListAccountingCreditNoteResponse$Outbound;
}

export function listAccountingCreditNoteResponseToJSON(
  listAccountingCreditNoteResponse: ListAccountingCreditNoteResponse,
): string {
  return JSON.stringify(
    ListAccountingCreditNoteResponse$outboundSchema.parse(
      listAccountingCreditNoteResponse,
    ),
  );
}

export function listAccountingCreditNoteResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountingCreditNoteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAccountingCreditNoteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountingCreditNoteResponse' from JSON`,
  );
}
