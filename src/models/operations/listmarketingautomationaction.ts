/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListMarketingautomationActionRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original software.
   */
  remoteData?: boolean | undefined;
  /**
   * Set to get the number of records.
   */
  limit?: number | undefined;
  /**
   * Set to get the number of records after this cursor.
   */
  cursor?: string | undefined;
};

export type ListMarketingautomationActionResponseBody = {
  prevCursor: string | null;
  nextCursor: string | null;
  data: Array<components.UnifiedMarketingautomationActionOutput>;
};

export type ListMarketingautomationActionResponse = {
  result: ListMarketingautomationActionResponseBody;
};

/** @internal */
export const ListMarketingautomationActionRequest$inboundSchema: z.ZodType<
  ListMarketingautomationActionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
  });
});

/** @internal */
export type ListMarketingautomationActionRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const ListMarketingautomationActionRequest$outboundSchema: z.ZodType<
  ListMarketingautomationActionRequest$Outbound,
  z.ZodTypeDef,
  ListMarketingautomationActionRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMarketingautomationActionRequest$ {
  /** @deprecated use `ListMarketingautomationActionRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListMarketingautomationActionRequest$inboundSchema;
  /** @deprecated use `ListMarketingautomationActionRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListMarketingautomationActionRequest$outboundSchema;
  /** @deprecated use `ListMarketingautomationActionRequest$Outbound` instead. */
  export type Outbound = ListMarketingautomationActionRequest$Outbound;
}

export function listMarketingautomationActionRequestToJSON(
  listMarketingautomationActionRequest: ListMarketingautomationActionRequest,
): string {
  return JSON.stringify(
    ListMarketingautomationActionRequest$outboundSchema.parse(
      listMarketingautomationActionRequest,
    ),
  );
}

export function listMarketingautomationActionRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListMarketingautomationActionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListMarketingautomationActionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMarketingautomationActionRequest' from JSON`,
  );
}

/** @internal */
export const ListMarketingautomationActionResponseBody$inboundSchema: z.ZodType<
  ListMarketingautomationActionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prev_cursor: z.nullable(z.string()),
  next_cursor: z.nullable(z.string()),
  data: z.array(
    components.UnifiedMarketingautomationActionOutput$inboundSchema,
  ),
}).transform((v) => {
  return remap$(v, {
    "prev_cursor": "prevCursor",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListMarketingautomationActionResponseBody$Outbound = {
  prev_cursor: string | null;
  next_cursor: string | null;
  data: Array<components.UnifiedMarketingautomationActionOutput$Outbound>;
};

/** @internal */
export const ListMarketingautomationActionResponseBody$outboundSchema:
  z.ZodType<
    ListMarketingautomationActionResponseBody$Outbound,
    z.ZodTypeDef,
    ListMarketingautomationActionResponseBody
  > = z.object({
    prevCursor: z.nullable(z.string()),
    nextCursor: z.nullable(z.string()),
    data: z.array(
      components.UnifiedMarketingautomationActionOutput$outboundSchema,
    ),
  }).transform((v) => {
    return remap$(v, {
      prevCursor: "prev_cursor",
      nextCursor: "next_cursor",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMarketingautomationActionResponseBody$ {
  /** @deprecated use `ListMarketingautomationActionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ListMarketingautomationActionResponseBody$inboundSchema;
  /** @deprecated use `ListMarketingautomationActionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ListMarketingautomationActionResponseBody$outboundSchema;
  /** @deprecated use `ListMarketingautomationActionResponseBody$Outbound` instead. */
  export type Outbound = ListMarketingautomationActionResponseBody$Outbound;
}

export function listMarketingautomationActionResponseBodyToJSON(
  listMarketingautomationActionResponseBody:
    ListMarketingautomationActionResponseBody,
): string {
  return JSON.stringify(
    ListMarketingautomationActionResponseBody$outboundSchema.parse(
      listMarketingautomationActionResponseBody,
    ),
  );
}

export function listMarketingautomationActionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ListMarketingautomationActionResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListMarketingautomationActionResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListMarketingautomationActionResponseBody' from JSON`,
  );
}

/** @internal */
export const ListMarketingautomationActionResponse$inboundSchema: z.ZodType<
  ListMarketingautomationActionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListMarketingautomationActionResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListMarketingautomationActionResponse$Outbound = {
  Result: ListMarketingautomationActionResponseBody$Outbound;
};

/** @internal */
export const ListMarketingautomationActionResponse$outboundSchema: z.ZodType<
  ListMarketingautomationActionResponse$Outbound,
  z.ZodTypeDef,
  ListMarketingautomationActionResponse
> = z.object({
  result: z.lazy(() =>
    ListMarketingautomationActionResponseBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMarketingautomationActionResponse$ {
  /** @deprecated use `ListMarketingautomationActionResponse$inboundSchema` instead. */
  export const inboundSchema =
    ListMarketingautomationActionResponse$inboundSchema;
  /** @deprecated use `ListMarketingautomationActionResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListMarketingautomationActionResponse$outboundSchema;
  /** @deprecated use `ListMarketingautomationActionResponse$Outbound` instead. */
  export type Outbound = ListMarketingautomationActionResponse$Outbound;
}

export function listMarketingautomationActionResponseToJSON(
  listMarketingautomationActionResponse: ListMarketingautomationActionResponse,
): string {
  return JSON.stringify(
    ListMarketingautomationActionResponse$outboundSchema.parse(
      listMarketingautomationActionResponse,
    ),
  );
}

export function listMarketingautomationActionResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListMarketingautomationActionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListMarketingautomationActionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMarketingautomationActionResponse' from JSON`,
  );
}
