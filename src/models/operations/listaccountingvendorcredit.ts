/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAccountingVendorCreditRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original software.
   */
  remoteData?: boolean | undefined;
  /**
   * Set to get the number of records.
   */
  limit?: number | undefined;
  /**
   * Set to get the number of records after this cursor.
   */
  cursor?: string | undefined;
};

export type ListAccountingVendorCreditResponseBody = {
  prevCursor: string | null;
  nextCursor: string | null;
  data: Array<components.UnifiedAccountingVendorcreditOutput>;
};

export type ListAccountingVendorCreditResponse = {
  result: ListAccountingVendorCreditResponseBody;
};

/** @internal */
export const ListAccountingVendorCreditRequest$inboundSchema: z.ZodType<
  ListAccountingVendorCreditRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
  });
});

/** @internal */
export type ListAccountingVendorCreditRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const ListAccountingVendorCreditRequest$outboundSchema: z.ZodType<
  ListAccountingVendorCreditRequest$Outbound,
  z.ZodTypeDef,
  ListAccountingVendorCreditRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountingVendorCreditRequest$ {
  /** @deprecated use `ListAccountingVendorCreditRequest$inboundSchema` instead. */
  export const inboundSchema = ListAccountingVendorCreditRequest$inboundSchema;
  /** @deprecated use `ListAccountingVendorCreditRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListAccountingVendorCreditRequest$outboundSchema;
  /** @deprecated use `ListAccountingVendorCreditRequest$Outbound` instead. */
  export type Outbound = ListAccountingVendorCreditRequest$Outbound;
}

export function listAccountingVendorCreditRequestToJSON(
  listAccountingVendorCreditRequest: ListAccountingVendorCreditRequest,
): string {
  return JSON.stringify(
    ListAccountingVendorCreditRequest$outboundSchema.parse(
      listAccountingVendorCreditRequest,
    ),
  );
}

export function listAccountingVendorCreditRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountingVendorCreditRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAccountingVendorCreditRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountingVendorCreditRequest' from JSON`,
  );
}

/** @internal */
export const ListAccountingVendorCreditResponseBody$inboundSchema: z.ZodType<
  ListAccountingVendorCreditResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prev_cursor: z.nullable(z.string()),
  next_cursor: z.nullable(z.string()),
  data: z.array(components.UnifiedAccountingVendorcreditOutput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "prev_cursor": "prevCursor",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListAccountingVendorCreditResponseBody$Outbound = {
  prev_cursor: string | null;
  next_cursor: string | null;
  data: Array<components.UnifiedAccountingVendorcreditOutput$Outbound>;
};

/** @internal */
export const ListAccountingVendorCreditResponseBody$outboundSchema: z.ZodType<
  ListAccountingVendorCreditResponseBody$Outbound,
  z.ZodTypeDef,
  ListAccountingVendorCreditResponseBody
> = z.object({
  prevCursor: z.nullable(z.string()),
  nextCursor: z.nullable(z.string()),
  data: z.array(components.UnifiedAccountingVendorcreditOutput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    prevCursor: "prev_cursor",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountingVendorCreditResponseBody$ {
  /** @deprecated use `ListAccountingVendorCreditResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ListAccountingVendorCreditResponseBody$inboundSchema;
  /** @deprecated use `ListAccountingVendorCreditResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ListAccountingVendorCreditResponseBody$outboundSchema;
  /** @deprecated use `ListAccountingVendorCreditResponseBody$Outbound` instead. */
  export type Outbound = ListAccountingVendorCreditResponseBody$Outbound;
}

export function listAccountingVendorCreditResponseBodyToJSON(
  listAccountingVendorCreditResponseBody:
    ListAccountingVendorCreditResponseBody,
): string {
  return JSON.stringify(
    ListAccountingVendorCreditResponseBody$outboundSchema.parse(
      listAccountingVendorCreditResponseBody,
    ),
  );
}

export function listAccountingVendorCreditResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountingVendorCreditResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAccountingVendorCreditResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountingVendorCreditResponseBody' from JSON`,
  );
}

/** @internal */
export const ListAccountingVendorCreditResponse$inboundSchema: z.ZodType<
  ListAccountingVendorCreditResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListAccountingVendorCreditResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListAccountingVendorCreditResponse$Outbound = {
  Result: ListAccountingVendorCreditResponseBody$Outbound;
};

/** @internal */
export const ListAccountingVendorCreditResponse$outboundSchema: z.ZodType<
  ListAccountingVendorCreditResponse$Outbound,
  z.ZodTypeDef,
  ListAccountingVendorCreditResponse
> = z.object({
  result: z.lazy(() => ListAccountingVendorCreditResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountingVendorCreditResponse$ {
  /** @deprecated use `ListAccountingVendorCreditResponse$inboundSchema` instead. */
  export const inboundSchema = ListAccountingVendorCreditResponse$inboundSchema;
  /** @deprecated use `ListAccountingVendorCreditResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListAccountingVendorCreditResponse$outboundSchema;
  /** @deprecated use `ListAccountingVendorCreditResponse$Outbound` instead. */
  export type Outbound = ListAccountingVendorCreditResponse$Outbound;
}

export function listAccountingVendorCreditResponseToJSON(
  listAccountingVendorCreditResponse: ListAccountingVendorCreditResponse,
): string {
  return JSON.stringify(
    ListAccountingVendorCreditResponse$outboundSchema.parse(
      listAccountingVendorCreditResponse,
    ),
  );
}

export function listAccountingVendorCreditResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountingVendorCreditResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAccountingVendorCreditResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountingVendorCreditResponse' from JSON`,
  );
}
