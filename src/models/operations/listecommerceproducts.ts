/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListEcommerceProductsRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original software.
   */
  remoteData?: boolean | undefined;
  /**
   * Set to get the number of records.
   */
  limit?: number | undefined;
  /**
   * Set to get the number of records after this cursor.
   */
  cursor?: string | undefined;
};

export type ListEcommerceProductsResponseBody = {
  prevCursor: string | null;
  nextCursor: string | null;
  data: Array<components.UnifiedEcommerceProductOutput>;
};

export type ListEcommerceProductsResponse = {
  result: ListEcommerceProductsResponseBody;
};

/** @internal */
export const ListEcommerceProductsRequest$inboundSchema: z.ZodType<
  ListEcommerceProductsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
  });
});

/** @internal */
export type ListEcommerceProductsRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const ListEcommerceProductsRequest$outboundSchema: z.ZodType<
  ListEcommerceProductsRequest$Outbound,
  z.ZodTypeDef,
  ListEcommerceProductsRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEcommerceProductsRequest$ {
  /** @deprecated use `ListEcommerceProductsRequest$inboundSchema` instead. */
  export const inboundSchema = ListEcommerceProductsRequest$inboundSchema;
  /** @deprecated use `ListEcommerceProductsRequest$outboundSchema` instead. */
  export const outboundSchema = ListEcommerceProductsRequest$outboundSchema;
  /** @deprecated use `ListEcommerceProductsRequest$Outbound` instead. */
  export type Outbound = ListEcommerceProductsRequest$Outbound;
}

export function listEcommerceProductsRequestToJSON(
  listEcommerceProductsRequest: ListEcommerceProductsRequest,
): string {
  return JSON.stringify(
    ListEcommerceProductsRequest$outboundSchema.parse(
      listEcommerceProductsRequest,
    ),
  );
}

export function listEcommerceProductsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListEcommerceProductsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEcommerceProductsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEcommerceProductsRequest' from JSON`,
  );
}

/** @internal */
export const ListEcommerceProductsResponseBody$inboundSchema: z.ZodType<
  ListEcommerceProductsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prev_cursor: z.nullable(z.string()),
  next_cursor: z.nullable(z.string()),
  data: z.array(components.UnifiedEcommerceProductOutput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "prev_cursor": "prevCursor",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListEcommerceProductsResponseBody$Outbound = {
  prev_cursor: string | null;
  next_cursor: string | null;
  data: Array<components.UnifiedEcommerceProductOutput$Outbound>;
};

/** @internal */
export const ListEcommerceProductsResponseBody$outboundSchema: z.ZodType<
  ListEcommerceProductsResponseBody$Outbound,
  z.ZodTypeDef,
  ListEcommerceProductsResponseBody
> = z.object({
  prevCursor: z.nullable(z.string()),
  nextCursor: z.nullable(z.string()),
  data: z.array(components.UnifiedEcommerceProductOutput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    prevCursor: "prev_cursor",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEcommerceProductsResponseBody$ {
  /** @deprecated use `ListEcommerceProductsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListEcommerceProductsResponseBody$inboundSchema;
  /** @deprecated use `ListEcommerceProductsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ListEcommerceProductsResponseBody$outboundSchema;
  /** @deprecated use `ListEcommerceProductsResponseBody$Outbound` instead. */
  export type Outbound = ListEcommerceProductsResponseBody$Outbound;
}

export function listEcommerceProductsResponseBodyToJSON(
  listEcommerceProductsResponseBody: ListEcommerceProductsResponseBody,
): string {
  return JSON.stringify(
    ListEcommerceProductsResponseBody$outboundSchema.parse(
      listEcommerceProductsResponseBody,
    ),
  );
}

export function listEcommerceProductsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListEcommerceProductsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEcommerceProductsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEcommerceProductsResponseBody' from JSON`,
  );
}

/** @internal */
export const ListEcommerceProductsResponse$inboundSchema: z.ZodType<
  ListEcommerceProductsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListEcommerceProductsResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListEcommerceProductsResponse$Outbound = {
  Result: ListEcommerceProductsResponseBody$Outbound;
};

/** @internal */
export const ListEcommerceProductsResponse$outboundSchema: z.ZodType<
  ListEcommerceProductsResponse$Outbound,
  z.ZodTypeDef,
  ListEcommerceProductsResponse
> = z.object({
  result: z.lazy(() => ListEcommerceProductsResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEcommerceProductsResponse$ {
  /** @deprecated use `ListEcommerceProductsResponse$inboundSchema` instead. */
  export const inboundSchema = ListEcommerceProductsResponse$inboundSchema;
  /** @deprecated use `ListEcommerceProductsResponse$outboundSchema` instead. */
  export const outboundSchema = ListEcommerceProductsResponse$outboundSchema;
  /** @deprecated use `ListEcommerceProductsResponse$Outbound` instead. */
  export type Outbound = ListEcommerceProductsResponse$Outbound;
}

export function listEcommerceProductsResponseToJSON(
  listEcommerceProductsResponse: ListEcommerceProductsResponse,
): string {
  return JSON.stringify(
    ListEcommerceProductsResponse$outboundSchema.parse(
      listEcommerceProductsResponse,
    ),
  );
}

export function listEcommerceProductsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListEcommerceProductsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEcommerceProductsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEcommerceProductsResponse' from JSON`,
  );
}
