/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTicketingCommentsRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original software.
   */
  remoteData?: boolean | undefined;
  /**
   * Set to get the number of records.
   */
  limit?: number | undefined;
  /**
   * Set to get the number of records after this cursor.
   */
  cursor?: string | undefined;
};

export type ListTicketingCommentsResponseBody = {
  prevCursor: string | null;
  nextCursor: string | null;
  data: Array<components.UnifiedTicketingCommentOutput>;
};

export type ListTicketingCommentsResponse = {
  result: ListTicketingCommentsResponseBody;
};

/** @internal */
export const ListTicketingCommentsRequest$inboundSchema: z.ZodType<
  ListTicketingCommentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
  });
});

/** @internal */
export type ListTicketingCommentsRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const ListTicketingCommentsRequest$outboundSchema: z.ZodType<
  ListTicketingCommentsRequest$Outbound,
  z.ZodTypeDef,
  ListTicketingCommentsRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketingCommentsRequest$ {
  /** @deprecated use `ListTicketingCommentsRequest$inboundSchema` instead. */
  export const inboundSchema = ListTicketingCommentsRequest$inboundSchema;
  /** @deprecated use `ListTicketingCommentsRequest$outboundSchema` instead. */
  export const outboundSchema = ListTicketingCommentsRequest$outboundSchema;
  /** @deprecated use `ListTicketingCommentsRequest$Outbound` instead. */
  export type Outbound = ListTicketingCommentsRequest$Outbound;
}

export function listTicketingCommentsRequestToJSON(
  listTicketingCommentsRequest: ListTicketingCommentsRequest,
): string {
  return JSON.stringify(
    ListTicketingCommentsRequest$outboundSchema.parse(
      listTicketingCommentsRequest,
    ),
  );
}

export function listTicketingCommentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketingCommentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketingCommentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketingCommentsRequest' from JSON`,
  );
}

/** @internal */
export const ListTicketingCommentsResponseBody$inboundSchema: z.ZodType<
  ListTicketingCommentsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prev_cursor: z.nullable(z.string()),
  next_cursor: z.nullable(z.string()),
  data: z.array(components.UnifiedTicketingCommentOutput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "prev_cursor": "prevCursor",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListTicketingCommentsResponseBody$Outbound = {
  prev_cursor: string | null;
  next_cursor: string | null;
  data: Array<components.UnifiedTicketingCommentOutput$Outbound>;
};

/** @internal */
export const ListTicketingCommentsResponseBody$outboundSchema: z.ZodType<
  ListTicketingCommentsResponseBody$Outbound,
  z.ZodTypeDef,
  ListTicketingCommentsResponseBody
> = z.object({
  prevCursor: z.nullable(z.string()),
  nextCursor: z.nullable(z.string()),
  data: z.array(components.UnifiedTicketingCommentOutput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    prevCursor: "prev_cursor",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketingCommentsResponseBody$ {
  /** @deprecated use `ListTicketingCommentsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListTicketingCommentsResponseBody$inboundSchema;
  /** @deprecated use `ListTicketingCommentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ListTicketingCommentsResponseBody$outboundSchema;
  /** @deprecated use `ListTicketingCommentsResponseBody$Outbound` instead. */
  export type Outbound = ListTicketingCommentsResponseBody$Outbound;
}

export function listTicketingCommentsResponseBodyToJSON(
  listTicketingCommentsResponseBody: ListTicketingCommentsResponseBody,
): string {
  return JSON.stringify(
    ListTicketingCommentsResponseBody$outboundSchema.parse(
      listTicketingCommentsResponseBody,
    ),
  );
}

export function listTicketingCommentsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketingCommentsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketingCommentsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketingCommentsResponseBody' from JSON`,
  );
}

/** @internal */
export const ListTicketingCommentsResponse$inboundSchema: z.ZodType<
  ListTicketingCommentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListTicketingCommentsResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListTicketingCommentsResponse$Outbound = {
  Result: ListTicketingCommentsResponseBody$Outbound;
};

/** @internal */
export const ListTicketingCommentsResponse$outboundSchema: z.ZodType<
  ListTicketingCommentsResponse$Outbound,
  z.ZodTypeDef,
  ListTicketingCommentsResponse
> = z.object({
  result: z.lazy(() => ListTicketingCommentsResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketingCommentsResponse$ {
  /** @deprecated use `ListTicketingCommentsResponse$inboundSchema` instead. */
  export const inboundSchema = ListTicketingCommentsResponse$inboundSchema;
  /** @deprecated use `ListTicketingCommentsResponse$outboundSchema` instead. */
  export const outboundSchema = ListTicketingCommentsResponse$outboundSchema;
  /** @deprecated use `ListTicketingCommentsResponse$Outbound` instead. */
  export type Outbound = ListTicketingCommentsResponse$Outbound;
}

export function listTicketingCommentsResponseToJSON(
  listTicketingCommentsResponse: ListTicketingCommentsResponse,
): string {
  return JSON.stringify(
    ListTicketingCommentsResponse$outboundSchema.parse(
      listTicketingCommentsResponse,
    ),
  );
}

export function listTicketingCommentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketingCommentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketingCommentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketingCommentsResponse' from JSON`,
  );
}
