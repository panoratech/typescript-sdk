/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAccountingCashflowStatementRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original software.
   */
  remoteData?: boolean | undefined;
  /**
   * Set to get the number of records.
   */
  limit?: number | undefined;
  /**
   * Set to get the number of records after this cursor.
   */
  cursor?: string | undefined;
};

export type ListAccountingCashflowStatementResponseBody = {
  prevCursor: string | null;
  nextCursor: string | null;
  data: Array<components.UnifiedAccountingCashflowstatementOutput>;
};

export type ListAccountingCashflowStatementResponse = {
  result: ListAccountingCashflowStatementResponseBody;
};

/** @internal */
export const ListAccountingCashflowStatementRequest$inboundSchema: z.ZodType<
  ListAccountingCashflowStatementRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
  });
});

/** @internal */
export type ListAccountingCashflowStatementRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const ListAccountingCashflowStatementRequest$outboundSchema: z.ZodType<
  ListAccountingCashflowStatementRequest$Outbound,
  z.ZodTypeDef,
  ListAccountingCashflowStatementRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountingCashflowStatementRequest$ {
  /** @deprecated use `ListAccountingCashflowStatementRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListAccountingCashflowStatementRequest$inboundSchema;
  /** @deprecated use `ListAccountingCashflowStatementRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListAccountingCashflowStatementRequest$outboundSchema;
  /** @deprecated use `ListAccountingCashflowStatementRequest$Outbound` instead. */
  export type Outbound = ListAccountingCashflowStatementRequest$Outbound;
}

export function listAccountingCashflowStatementRequestToJSON(
  listAccountingCashflowStatementRequest:
    ListAccountingCashflowStatementRequest,
): string {
  return JSON.stringify(
    ListAccountingCashflowStatementRequest$outboundSchema.parse(
      listAccountingCashflowStatementRequest,
    ),
  );
}

export function listAccountingCashflowStatementRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountingCashflowStatementRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAccountingCashflowStatementRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountingCashflowStatementRequest' from JSON`,
  );
}

/** @internal */
export const ListAccountingCashflowStatementResponseBody$inboundSchema:
  z.ZodType<
    ListAccountingCashflowStatementResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    prev_cursor: z.nullable(z.string()),
    next_cursor: z.nullable(z.string()),
    data: z.array(
      components.UnifiedAccountingCashflowstatementOutput$inboundSchema,
    ),
  }).transform((v) => {
    return remap$(v, {
      "prev_cursor": "prevCursor",
      "next_cursor": "nextCursor",
    });
  });

/** @internal */
export type ListAccountingCashflowStatementResponseBody$Outbound = {
  prev_cursor: string | null;
  next_cursor: string | null;
  data: Array<components.UnifiedAccountingCashflowstatementOutput$Outbound>;
};

/** @internal */
export const ListAccountingCashflowStatementResponseBody$outboundSchema:
  z.ZodType<
    ListAccountingCashflowStatementResponseBody$Outbound,
    z.ZodTypeDef,
    ListAccountingCashflowStatementResponseBody
  > = z.object({
    prevCursor: z.nullable(z.string()),
    nextCursor: z.nullable(z.string()),
    data: z.array(
      components.UnifiedAccountingCashflowstatementOutput$outboundSchema,
    ),
  }).transform((v) => {
    return remap$(v, {
      prevCursor: "prev_cursor",
      nextCursor: "next_cursor",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountingCashflowStatementResponseBody$ {
  /** @deprecated use `ListAccountingCashflowStatementResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ListAccountingCashflowStatementResponseBody$inboundSchema;
  /** @deprecated use `ListAccountingCashflowStatementResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ListAccountingCashflowStatementResponseBody$outboundSchema;
  /** @deprecated use `ListAccountingCashflowStatementResponseBody$Outbound` instead. */
  export type Outbound = ListAccountingCashflowStatementResponseBody$Outbound;
}

export function listAccountingCashflowStatementResponseBodyToJSON(
  listAccountingCashflowStatementResponseBody:
    ListAccountingCashflowStatementResponseBody,
): string {
  return JSON.stringify(
    ListAccountingCashflowStatementResponseBody$outboundSchema.parse(
      listAccountingCashflowStatementResponseBody,
    ),
  );
}

export function listAccountingCashflowStatementResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ListAccountingCashflowStatementResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListAccountingCashflowStatementResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListAccountingCashflowStatementResponseBody' from JSON`,
  );
}

/** @internal */
export const ListAccountingCashflowStatementResponse$inboundSchema: z.ZodType<
  ListAccountingCashflowStatementResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() =>
    ListAccountingCashflowStatementResponseBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListAccountingCashflowStatementResponse$Outbound = {
  Result: ListAccountingCashflowStatementResponseBody$Outbound;
};

/** @internal */
export const ListAccountingCashflowStatementResponse$outboundSchema: z.ZodType<
  ListAccountingCashflowStatementResponse$Outbound,
  z.ZodTypeDef,
  ListAccountingCashflowStatementResponse
> = z.object({
  result: z.lazy(() =>
    ListAccountingCashflowStatementResponseBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountingCashflowStatementResponse$ {
  /** @deprecated use `ListAccountingCashflowStatementResponse$inboundSchema` instead. */
  export const inboundSchema =
    ListAccountingCashflowStatementResponse$inboundSchema;
  /** @deprecated use `ListAccountingCashflowStatementResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListAccountingCashflowStatementResponse$outboundSchema;
  /** @deprecated use `ListAccountingCashflowStatementResponse$Outbound` instead. */
  export type Outbound = ListAccountingCashflowStatementResponse$Outbound;
}

export function listAccountingCashflowStatementResponseToJSON(
  listAccountingCashflowStatementResponse:
    ListAccountingCashflowStatementResponse,
): string {
  return JSON.stringify(
    ListAccountingCashflowStatementResponse$outboundSchema.parse(
      listAccountingCashflowStatementResponse,
    ),
  );
}

export function listAccountingCashflowStatementResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ListAccountingCashflowStatementResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListAccountingCashflowStatementResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListAccountingCashflowStatementResponse' from JSON`,
  );
}
