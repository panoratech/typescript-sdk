/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTicketingAccountRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original software.
   */
  remoteData?: boolean | undefined;
  /**
   * Set to get the number of records.
   */
  limit?: number | undefined;
  /**
   * Set to get the number of records after this cursor.
   */
  cursor?: string | undefined;
};

export type ListTicketingAccountResponseBody = {
  prevCursor: string | null;
  nextCursor: string | null;
  data: Array<components.UnifiedTicketingAccountOutput>;
};

export type ListTicketingAccountResponse = {
  result: ListTicketingAccountResponseBody;
};

/** @internal */
export const ListTicketingAccountRequest$inboundSchema: z.ZodType<
  ListTicketingAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
  });
});

/** @internal */
export type ListTicketingAccountRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const ListTicketingAccountRequest$outboundSchema: z.ZodType<
  ListTicketingAccountRequest$Outbound,
  z.ZodTypeDef,
  ListTicketingAccountRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketingAccountRequest$ {
  /** @deprecated use `ListTicketingAccountRequest$inboundSchema` instead. */
  export const inboundSchema = ListTicketingAccountRequest$inboundSchema;
  /** @deprecated use `ListTicketingAccountRequest$outboundSchema` instead. */
  export const outboundSchema = ListTicketingAccountRequest$outboundSchema;
  /** @deprecated use `ListTicketingAccountRequest$Outbound` instead. */
  export type Outbound = ListTicketingAccountRequest$Outbound;
}

export function listTicketingAccountRequestToJSON(
  listTicketingAccountRequest: ListTicketingAccountRequest,
): string {
  return JSON.stringify(
    ListTicketingAccountRequest$outboundSchema.parse(
      listTicketingAccountRequest,
    ),
  );
}

export function listTicketingAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketingAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketingAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketingAccountRequest' from JSON`,
  );
}

/** @internal */
export const ListTicketingAccountResponseBody$inboundSchema: z.ZodType<
  ListTicketingAccountResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prev_cursor: z.nullable(z.string()),
  next_cursor: z.nullable(z.string()),
  data: z.array(components.UnifiedTicketingAccountOutput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "prev_cursor": "prevCursor",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListTicketingAccountResponseBody$Outbound = {
  prev_cursor: string | null;
  next_cursor: string | null;
  data: Array<components.UnifiedTicketingAccountOutput$Outbound>;
};

/** @internal */
export const ListTicketingAccountResponseBody$outboundSchema: z.ZodType<
  ListTicketingAccountResponseBody$Outbound,
  z.ZodTypeDef,
  ListTicketingAccountResponseBody
> = z.object({
  prevCursor: z.nullable(z.string()),
  nextCursor: z.nullable(z.string()),
  data: z.array(components.UnifiedTicketingAccountOutput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    prevCursor: "prev_cursor",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketingAccountResponseBody$ {
  /** @deprecated use `ListTicketingAccountResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListTicketingAccountResponseBody$inboundSchema;
  /** @deprecated use `ListTicketingAccountResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListTicketingAccountResponseBody$outboundSchema;
  /** @deprecated use `ListTicketingAccountResponseBody$Outbound` instead. */
  export type Outbound = ListTicketingAccountResponseBody$Outbound;
}

export function listTicketingAccountResponseBodyToJSON(
  listTicketingAccountResponseBody: ListTicketingAccountResponseBody,
): string {
  return JSON.stringify(
    ListTicketingAccountResponseBody$outboundSchema.parse(
      listTicketingAccountResponseBody,
    ),
  );
}

export function listTicketingAccountResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketingAccountResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketingAccountResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketingAccountResponseBody' from JSON`,
  );
}

/** @internal */
export const ListTicketingAccountResponse$inboundSchema: z.ZodType<
  ListTicketingAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListTicketingAccountResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListTicketingAccountResponse$Outbound = {
  Result: ListTicketingAccountResponseBody$Outbound;
};

/** @internal */
export const ListTicketingAccountResponse$outboundSchema: z.ZodType<
  ListTicketingAccountResponse$Outbound,
  z.ZodTypeDef,
  ListTicketingAccountResponse
> = z.object({
  result: z.lazy(() => ListTicketingAccountResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketingAccountResponse$ {
  /** @deprecated use `ListTicketingAccountResponse$inboundSchema` instead. */
  export const inboundSchema = ListTicketingAccountResponse$inboundSchema;
  /** @deprecated use `ListTicketingAccountResponse$outboundSchema` instead. */
  export const outboundSchema = ListTicketingAccountResponse$outboundSchema;
  /** @deprecated use `ListTicketingAccountResponse$Outbound` instead. */
  export type Outbound = ListTicketingAccountResponse$Outbound;
}

export function listTicketingAccountResponseToJSON(
  listTicketingAccountResponse: ListTicketingAccountResponse,
): string {
  return JSON.stringify(
    ListTicketingAccountResponse$outboundSchema.parse(
      listTicketingAccountResponse,
    ),
  );
}

export function listTicketingAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketingAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketingAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketingAccountResponse' from JSON`,
  );
}
