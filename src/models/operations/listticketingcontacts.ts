/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTicketingContactsRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original software.
   */
  remoteData?: boolean | undefined;
  /**
   * Set to get the number of records.
   */
  limit?: number | undefined;
  /**
   * Set to get the number of records after this cursor.
   */
  cursor?: string | undefined;
};

export type ListTicketingContactsResponseBody = {
  prevCursor: string | null;
  nextCursor: string | null;
  data: Array<components.UnifiedTicketingContactOutput>;
};

export type ListTicketingContactsResponse = {
  result: ListTicketingContactsResponseBody;
};

/** @internal */
export const ListTicketingContactsRequest$inboundSchema: z.ZodType<
  ListTicketingContactsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
  });
});

/** @internal */
export type ListTicketingContactsRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const ListTicketingContactsRequest$outboundSchema: z.ZodType<
  ListTicketingContactsRequest$Outbound,
  z.ZodTypeDef,
  ListTicketingContactsRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketingContactsRequest$ {
  /** @deprecated use `ListTicketingContactsRequest$inboundSchema` instead. */
  export const inboundSchema = ListTicketingContactsRequest$inboundSchema;
  /** @deprecated use `ListTicketingContactsRequest$outboundSchema` instead. */
  export const outboundSchema = ListTicketingContactsRequest$outboundSchema;
  /** @deprecated use `ListTicketingContactsRequest$Outbound` instead. */
  export type Outbound = ListTicketingContactsRequest$Outbound;
}

export function listTicketingContactsRequestToJSON(
  listTicketingContactsRequest: ListTicketingContactsRequest,
): string {
  return JSON.stringify(
    ListTicketingContactsRequest$outboundSchema.parse(
      listTicketingContactsRequest,
    ),
  );
}

export function listTicketingContactsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketingContactsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketingContactsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketingContactsRequest' from JSON`,
  );
}

/** @internal */
export const ListTicketingContactsResponseBody$inboundSchema: z.ZodType<
  ListTicketingContactsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prev_cursor: z.nullable(z.string()),
  next_cursor: z.nullable(z.string()),
  data: z.array(components.UnifiedTicketingContactOutput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "prev_cursor": "prevCursor",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListTicketingContactsResponseBody$Outbound = {
  prev_cursor: string | null;
  next_cursor: string | null;
  data: Array<components.UnifiedTicketingContactOutput$Outbound>;
};

/** @internal */
export const ListTicketingContactsResponseBody$outboundSchema: z.ZodType<
  ListTicketingContactsResponseBody$Outbound,
  z.ZodTypeDef,
  ListTicketingContactsResponseBody
> = z.object({
  prevCursor: z.nullable(z.string()),
  nextCursor: z.nullable(z.string()),
  data: z.array(components.UnifiedTicketingContactOutput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    prevCursor: "prev_cursor",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketingContactsResponseBody$ {
  /** @deprecated use `ListTicketingContactsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListTicketingContactsResponseBody$inboundSchema;
  /** @deprecated use `ListTicketingContactsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ListTicketingContactsResponseBody$outboundSchema;
  /** @deprecated use `ListTicketingContactsResponseBody$Outbound` instead. */
  export type Outbound = ListTicketingContactsResponseBody$Outbound;
}

export function listTicketingContactsResponseBodyToJSON(
  listTicketingContactsResponseBody: ListTicketingContactsResponseBody,
): string {
  return JSON.stringify(
    ListTicketingContactsResponseBody$outboundSchema.parse(
      listTicketingContactsResponseBody,
    ),
  );
}

export function listTicketingContactsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketingContactsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketingContactsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketingContactsResponseBody' from JSON`,
  );
}

/** @internal */
export const ListTicketingContactsResponse$inboundSchema: z.ZodType<
  ListTicketingContactsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListTicketingContactsResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListTicketingContactsResponse$Outbound = {
  Result: ListTicketingContactsResponseBody$Outbound;
};

/** @internal */
export const ListTicketingContactsResponse$outboundSchema: z.ZodType<
  ListTicketingContactsResponse$Outbound,
  z.ZodTypeDef,
  ListTicketingContactsResponse
> = z.object({
  result: z.lazy(() => ListTicketingContactsResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketingContactsResponse$ {
  /** @deprecated use `ListTicketingContactsResponse$inboundSchema` instead. */
  export const inboundSchema = ListTicketingContactsResponse$inboundSchema;
  /** @deprecated use `ListTicketingContactsResponse$outboundSchema` instead. */
  export const outboundSchema = ListTicketingContactsResponse$outboundSchema;
  /** @deprecated use `ListTicketingContactsResponse$Outbound` instead. */
  export type Outbound = ListTicketingContactsResponse$Outbound;
}

export function listTicketingContactsResponseToJSON(
  listTicketingContactsResponse: ListTicketingContactsResponse,
): string {
  return JSON.stringify(
    ListTicketingContactsResponse$outboundSchema.parse(
      listTicketingContactsResponse,
    ),
  );
}

export function listTicketingContactsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketingContactsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketingContactsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketingContactsResponse' from JSON`,
  );
}
