/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAccountingItemRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original software.
   */
  remoteData?: boolean | undefined;
  /**
   * Set to get the number of records.
   */
  limit?: number | undefined;
  /**
   * Set to get the number of records after this cursor.
   */
  cursor?: string | undefined;
};

export type ListAccountingItemResponseBody = {
  prevCursor: string | null;
  nextCursor: string | null;
  data: Array<components.UnifiedAccountingItemOutput>;
};

export type ListAccountingItemResponse = {
  result: ListAccountingItemResponseBody;
};

/** @internal */
export const ListAccountingItemRequest$inboundSchema: z.ZodType<
  ListAccountingItemRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
  });
});

/** @internal */
export type ListAccountingItemRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const ListAccountingItemRequest$outboundSchema: z.ZodType<
  ListAccountingItemRequest$Outbound,
  z.ZodTypeDef,
  ListAccountingItemRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountingItemRequest$ {
  /** @deprecated use `ListAccountingItemRequest$inboundSchema` instead. */
  export const inboundSchema = ListAccountingItemRequest$inboundSchema;
  /** @deprecated use `ListAccountingItemRequest$outboundSchema` instead. */
  export const outboundSchema = ListAccountingItemRequest$outboundSchema;
  /** @deprecated use `ListAccountingItemRequest$Outbound` instead. */
  export type Outbound = ListAccountingItemRequest$Outbound;
}

export function listAccountingItemRequestToJSON(
  listAccountingItemRequest: ListAccountingItemRequest,
): string {
  return JSON.stringify(
    ListAccountingItemRequest$outboundSchema.parse(listAccountingItemRequest),
  );
}

export function listAccountingItemRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountingItemRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAccountingItemRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountingItemRequest' from JSON`,
  );
}

/** @internal */
export const ListAccountingItemResponseBody$inboundSchema: z.ZodType<
  ListAccountingItemResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prev_cursor: z.nullable(z.string()),
  next_cursor: z.nullable(z.string()),
  data: z.array(components.UnifiedAccountingItemOutput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "prev_cursor": "prevCursor",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListAccountingItemResponseBody$Outbound = {
  prev_cursor: string | null;
  next_cursor: string | null;
  data: Array<components.UnifiedAccountingItemOutput$Outbound>;
};

/** @internal */
export const ListAccountingItemResponseBody$outboundSchema: z.ZodType<
  ListAccountingItemResponseBody$Outbound,
  z.ZodTypeDef,
  ListAccountingItemResponseBody
> = z.object({
  prevCursor: z.nullable(z.string()),
  nextCursor: z.nullable(z.string()),
  data: z.array(components.UnifiedAccountingItemOutput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    prevCursor: "prev_cursor",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountingItemResponseBody$ {
  /** @deprecated use `ListAccountingItemResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListAccountingItemResponseBody$inboundSchema;
  /** @deprecated use `ListAccountingItemResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListAccountingItemResponseBody$outboundSchema;
  /** @deprecated use `ListAccountingItemResponseBody$Outbound` instead. */
  export type Outbound = ListAccountingItemResponseBody$Outbound;
}

export function listAccountingItemResponseBodyToJSON(
  listAccountingItemResponseBody: ListAccountingItemResponseBody,
): string {
  return JSON.stringify(
    ListAccountingItemResponseBody$outboundSchema.parse(
      listAccountingItemResponseBody,
    ),
  );
}

export function listAccountingItemResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountingItemResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAccountingItemResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountingItemResponseBody' from JSON`,
  );
}

/** @internal */
export const ListAccountingItemResponse$inboundSchema: z.ZodType<
  ListAccountingItemResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListAccountingItemResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListAccountingItemResponse$Outbound = {
  Result: ListAccountingItemResponseBody$Outbound;
};

/** @internal */
export const ListAccountingItemResponse$outboundSchema: z.ZodType<
  ListAccountingItemResponse$Outbound,
  z.ZodTypeDef,
  ListAccountingItemResponse
> = z.object({
  result: z.lazy(() => ListAccountingItemResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountingItemResponse$ {
  /** @deprecated use `ListAccountingItemResponse$inboundSchema` instead. */
  export const inboundSchema = ListAccountingItemResponse$inboundSchema;
  /** @deprecated use `ListAccountingItemResponse$outboundSchema` instead. */
  export const outboundSchema = ListAccountingItemResponse$outboundSchema;
  /** @deprecated use `ListAccountingItemResponse$Outbound` instead. */
  export type Outbound = ListAccountingItemResponse$Outbound;
}

export function listAccountingItemResponseToJSON(
  listAccountingItemResponse: ListAccountingItemResponse,
): string {
  return JSON.stringify(
    ListAccountingItemResponse$outboundSchema.parse(listAccountingItemResponse),
  );
}

export function listAccountingItemResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountingItemResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAccountingItemResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountingItemResponse' from JSON`,
  );
}
