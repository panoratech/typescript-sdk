/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListFilestorageFolderRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original software.
   */
  remoteData?: boolean | undefined;
  /**
   * Set to get the number of records.
   */
  limit?: number | undefined;
  /**
   * Set to get the number of records after this cursor.
   */
  cursor?: string | undefined;
};

export type ListFilestorageFolderResponseBody = {
  prevCursor: string | null;
  nextCursor: string | null;
  data: Array<components.UnifiedFilestorageFolderOutput>;
};

export type ListFilestorageFolderResponse = {
  result: ListFilestorageFolderResponseBody;
};

/** @internal */
export const ListFilestorageFolderRequest$inboundSchema: z.ZodType<
  ListFilestorageFolderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
  });
});

/** @internal */
export type ListFilestorageFolderRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const ListFilestorageFolderRequest$outboundSchema: z.ZodType<
  ListFilestorageFolderRequest$Outbound,
  z.ZodTypeDef,
  ListFilestorageFolderRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFilestorageFolderRequest$ {
  /** @deprecated use `ListFilestorageFolderRequest$inboundSchema` instead. */
  export const inboundSchema = ListFilestorageFolderRequest$inboundSchema;
  /** @deprecated use `ListFilestorageFolderRequest$outboundSchema` instead. */
  export const outboundSchema = ListFilestorageFolderRequest$outboundSchema;
  /** @deprecated use `ListFilestorageFolderRequest$Outbound` instead. */
  export type Outbound = ListFilestorageFolderRequest$Outbound;
}

export function listFilestorageFolderRequestToJSON(
  listFilestorageFolderRequest: ListFilestorageFolderRequest,
): string {
  return JSON.stringify(
    ListFilestorageFolderRequest$outboundSchema.parse(
      listFilestorageFolderRequest,
    ),
  );
}

export function listFilestorageFolderRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListFilestorageFolderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFilestorageFolderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFilestorageFolderRequest' from JSON`,
  );
}

/** @internal */
export const ListFilestorageFolderResponseBody$inboundSchema: z.ZodType<
  ListFilestorageFolderResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prev_cursor: z.nullable(z.string()),
  next_cursor: z.nullable(z.string()),
  data: z.array(components.UnifiedFilestorageFolderOutput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "prev_cursor": "prevCursor",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListFilestorageFolderResponseBody$Outbound = {
  prev_cursor: string | null;
  next_cursor: string | null;
  data: Array<components.UnifiedFilestorageFolderOutput$Outbound>;
};

/** @internal */
export const ListFilestorageFolderResponseBody$outboundSchema: z.ZodType<
  ListFilestorageFolderResponseBody$Outbound,
  z.ZodTypeDef,
  ListFilestorageFolderResponseBody
> = z.object({
  prevCursor: z.nullable(z.string()),
  nextCursor: z.nullable(z.string()),
  data: z.array(components.UnifiedFilestorageFolderOutput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    prevCursor: "prev_cursor",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFilestorageFolderResponseBody$ {
  /** @deprecated use `ListFilestorageFolderResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListFilestorageFolderResponseBody$inboundSchema;
  /** @deprecated use `ListFilestorageFolderResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ListFilestorageFolderResponseBody$outboundSchema;
  /** @deprecated use `ListFilestorageFolderResponseBody$Outbound` instead. */
  export type Outbound = ListFilestorageFolderResponseBody$Outbound;
}

export function listFilestorageFolderResponseBodyToJSON(
  listFilestorageFolderResponseBody: ListFilestorageFolderResponseBody,
): string {
  return JSON.stringify(
    ListFilestorageFolderResponseBody$outboundSchema.parse(
      listFilestorageFolderResponseBody,
    ),
  );
}

export function listFilestorageFolderResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListFilestorageFolderResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFilestorageFolderResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFilestorageFolderResponseBody' from JSON`,
  );
}

/** @internal */
export const ListFilestorageFolderResponse$inboundSchema: z.ZodType<
  ListFilestorageFolderResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListFilestorageFolderResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListFilestorageFolderResponse$Outbound = {
  Result: ListFilestorageFolderResponseBody$Outbound;
};

/** @internal */
export const ListFilestorageFolderResponse$outboundSchema: z.ZodType<
  ListFilestorageFolderResponse$Outbound,
  z.ZodTypeDef,
  ListFilestorageFolderResponse
> = z.object({
  result: z.lazy(() => ListFilestorageFolderResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFilestorageFolderResponse$ {
  /** @deprecated use `ListFilestorageFolderResponse$inboundSchema` instead. */
  export const inboundSchema = ListFilestorageFolderResponse$inboundSchema;
  /** @deprecated use `ListFilestorageFolderResponse$outboundSchema` instead. */
  export const outboundSchema = ListFilestorageFolderResponse$outboundSchema;
  /** @deprecated use `ListFilestorageFolderResponse$Outbound` instead. */
  export type Outbound = ListFilestorageFolderResponse$Outbound;
}

export function listFilestorageFolderResponseToJSON(
  listFilestorageFolderResponse: ListFilestorageFolderResponse,
): string {
  return JSON.stringify(
    ListFilestorageFolderResponse$outboundSchema.parse(
      listFilestorageFolderResponse,
    ),
  );
}

export function listFilestorageFolderResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListFilestorageFolderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFilestorageFolderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFilestorageFolderResponse' from JSON`,
  );
}
