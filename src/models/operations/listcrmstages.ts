/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListCrmStagesRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original software.
   */
  remoteData?: boolean | undefined;
  /**
   * Set to get the number of records.
   */
  limit?: number | undefined;
  /**
   * Set to get the number of records after this cursor.
   */
  cursor?: string | undefined;
};

export type ListCrmStagesResponseBody = {
  prevCursor: string | null;
  nextCursor: string | null;
  data: Array<components.UnifiedCrmStageOutput>;
};

export type ListCrmStagesResponse = {
  result: ListCrmStagesResponseBody;
};

/** @internal */
export const ListCrmStagesRequest$inboundSchema: z.ZodType<
  ListCrmStagesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
  });
});

/** @internal */
export type ListCrmStagesRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const ListCrmStagesRequest$outboundSchema: z.ZodType<
  ListCrmStagesRequest$Outbound,
  z.ZodTypeDef,
  ListCrmStagesRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCrmStagesRequest$ {
  /** @deprecated use `ListCrmStagesRequest$inboundSchema` instead. */
  export const inboundSchema = ListCrmStagesRequest$inboundSchema;
  /** @deprecated use `ListCrmStagesRequest$outboundSchema` instead. */
  export const outboundSchema = ListCrmStagesRequest$outboundSchema;
  /** @deprecated use `ListCrmStagesRequest$Outbound` instead. */
  export type Outbound = ListCrmStagesRequest$Outbound;
}

export function listCrmStagesRequestToJSON(
  listCrmStagesRequest: ListCrmStagesRequest,
): string {
  return JSON.stringify(
    ListCrmStagesRequest$outboundSchema.parse(listCrmStagesRequest),
  );
}

export function listCrmStagesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListCrmStagesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCrmStagesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCrmStagesRequest' from JSON`,
  );
}

/** @internal */
export const ListCrmStagesResponseBody$inboundSchema: z.ZodType<
  ListCrmStagesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prev_cursor: z.nullable(z.string()),
  next_cursor: z.nullable(z.string()),
  data: z.array(components.UnifiedCrmStageOutput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "prev_cursor": "prevCursor",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListCrmStagesResponseBody$Outbound = {
  prev_cursor: string | null;
  next_cursor: string | null;
  data: Array<components.UnifiedCrmStageOutput$Outbound>;
};

/** @internal */
export const ListCrmStagesResponseBody$outboundSchema: z.ZodType<
  ListCrmStagesResponseBody$Outbound,
  z.ZodTypeDef,
  ListCrmStagesResponseBody
> = z.object({
  prevCursor: z.nullable(z.string()),
  nextCursor: z.nullable(z.string()),
  data: z.array(components.UnifiedCrmStageOutput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    prevCursor: "prev_cursor",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCrmStagesResponseBody$ {
  /** @deprecated use `ListCrmStagesResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListCrmStagesResponseBody$inboundSchema;
  /** @deprecated use `ListCrmStagesResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListCrmStagesResponseBody$outboundSchema;
  /** @deprecated use `ListCrmStagesResponseBody$Outbound` instead. */
  export type Outbound = ListCrmStagesResponseBody$Outbound;
}

export function listCrmStagesResponseBodyToJSON(
  listCrmStagesResponseBody: ListCrmStagesResponseBody,
): string {
  return JSON.stringify(
    ListCrmStagesResponseBody$outboundSchema.parse(listCrmStagesResponseBody),
  );
}

export function listCrmStagesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListCrmStagesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCrmStagesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCrmStagesResponseBody' from JSON`,
  );
}

/** @internal */
export const ListCrmStagesResponse$inboundSchema: z.ZodType<
  ListCrmStagesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListCrmStagesResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListCrmStagesResponse$Outbound = {
  Result: ListCrmStagesResponseBody$Outbound;
};

/** @internal */
export const ListCrmStagesResponse$outboundSchema: z.ZodType<
  ListCrmStagesResponse$Outbound,
  z.ZodTypeDef,
  ListCrmStagesResponse
> = z.object({
  result: z.lazy(() => ListCrmStagesResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCrmStagesResponse$ {
  /** @deprecated use `ListCrmStagesResponse$inboundSchema` instead. */
  export const inboundSchema = ListCrmStagesResponse$inboundSchema;
  /** @deprecated use `ListCrmStagesResponse$outboundSchema` instead. */
  export const outboundSchema = ListCrmStagesResponse$outboundSchema;
  /** @deprecated use `ListCrmStagesResponse$Outbound` instead. */
  export type Outbound = ListCrmStagesResponse$Outbound;
}

export function listCrmStagesResponseToJSON(
  listCrmStagesResponse: ListCrmStagesResponse,
): string {
  return JSON.stringify(
    ListCrmStagesResponse$outboundSchema.parse(listCrmStagesResponse),
  );
}

export function listCrmStagesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListCrmStagesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCrmStagesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCrmStagesResponse' from JSON`,
  );
}
