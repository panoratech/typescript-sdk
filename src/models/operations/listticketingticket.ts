/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTicketingTicketRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original software.
   */
  remoteData?: boolean | undefined;
  /**
   * Set to get the number of records.
   */
  limit?: number | undefined;
  /**
   * Set to get the number of records after this cursor.
   */
  cursor?: string | undefined;
};

export type ListTicketingTicketResponseBody = {
  prevCursor: string | null;
  nextCursor: string | null;
  data: Array<components.UnifiedTicketingTicketOutput>;
};

export type ListTicketingTicketResponse = {
  result: ListTicketingTicketResponseBody;
};

/** @internal */
export const ListTicketingTicketRequest$inboundSchema: z.ZodType<
  ListTicketingTicketRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
  });
});

/** @internal */
export type ListTicketingTicketRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const ListTicketingTicketRequest$outboundSchema: z.ZodType<
  ListTicketingTicketRequest$Outbound,
  z.ZodTypeDef,
  ListTicketingTicketRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketingTicketRequest$ {
  /** @deprecated use `ListTicketingTicketRequest$inboundSchema` instead. */
  export const inboundSchema = ListTicketingTicketRequest$inboundSchema;
  /** @deprecated use `ListTicketingTicketRequest$outboundSchema` instead. */
  export const outboundSchema = ListTicketingTicketRequest$outboundSchema;
  /** @deprecated use `ListTicketingTicketRequest$Outbound` instead. */
  export type Outbound = ListTicketingTicketRequest$Outbound;
}

export function listTicketingTicketRequestToJSON(
  listTicketingTicketRequest: ListTicketingTicketRequest,
): string {
  return JSON.stringify(
    ListTicketingTicketRequest$outboundSchema.parse(listTicketingTicketRequest),
  );
}

export function listTicketingTicketRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketingTicketRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketingTicketRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketingTicketRequest' from JSON`,
  );
}

/** @internal */
export const ListTicketingTicketResponseBody$inboundSchema: z.ZodType<
  ListTicketingTicketResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prev_cursor: z.nullable(z.string()),
  next_cursor: z.nullable(z.string()),
  data: z.array(components.UnifiedTicketingTicketOutput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "prev_cursor": "prevCursor",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListTicketingTicketResponseBody$Outbound = {
  prev_cursor: string | null;
  next_cursor: string | null;
  data: Array<components.UnifiedTicketingTicketOutput$Outbound>;
};

/** @internal */
export const ListTicketingTicketResponseBody$outboundSchema: z.ZodType<
  ListTicketingTicketResponseBody$Outbound,
  z.ZodTypeDef,
  ListTicketingTicketResponseBody
> = z.object({
  prevCursor: z.nullable(z.string()),
  nextCursor: z.nullable(z.string()),
  data: z.array(components.UnifiedTicketingTicketOutput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    prevCursor: "prev_cursor",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketingTicketResponseBody$ {
  /** @deprecated use `ListTicketingTicketResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListTicketingTicketResponseBody$inboundSchema;
  /** @deprecated use `ListTicketingTicketResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListTicketingTicketResponseBody$outboundSchema;
  /** @deprecated use `ListTicketingTicketResponseBody$Outbound` instead. */
  export type Outbound = ListTicketingTicketResponseBody$Outbound;
}

export function listTicketingTicketResponseBodyToJSON(
  listTicketingTicketResponseBody: ListTicketingTicketResponseBody,
): string {
  return JSON.stringify(
    ListTicketingTicketResponseBody$outboundSchema.parse(
      listTicketingTicketResponseBody,
    ),
  );
}

export function listTicketingTicketResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketingTicketResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketingTicketResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketingTicketResponseBody' from JSON`,
  );
}

/** @internal */
export const ListTicketingTicketResponse$inboundSchema: z.ZodType<
  ListTicketingTicketResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListTicketingTicketResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListTicketingTicketResponse$Outbound = {
  Result: ListTicketingTicketResponseBody$Outbound;
};

/** @internal */
export const ListTicketingTicketResponse$outboundSchema: z.ZodType<
  ListTicketingTicketResponse$Outbound,
  z.ZodTypeDef,
  ListTicketingTicketResponse
> = z.object({
  result: z.lazy(() => ListTicketingTicketResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTicketingTicketResponse$ {
  /** @deprecated use `ListTicketingTicketResponse$inboundSchema` instead. */
  export const inboundSchema = ListTicketingTicketResponse$inboundSchema;
  /** @deprecated use `ListTicketingTicketResponse$outboundSchema` instead. */
  export const outboundSchema = ListTicketingTicketResponse$outboundSchema;
  /** @deprecated use `ListTicketingTicketResponse$Outbound` instead. */
  export type Outbound = ListTicketingTicketResponse$Outbound;
}

export function listTicketingTicketResponseToJSON(
  listTicketingTicketResponse: ListTicketingTicketResponse,
): string {
  return JSON.stringify(
    ListTicketingTicketResponse$outboundSchema.parse(
      listTicketingTicketResponse,
    ),
  );
}

export function listTicketingTicketResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTicketingTicketResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTicketingTicketResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTicketingTicketResponse' from JSON`,
  );
}
