/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListMarketingautomationListsRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original software.
   */
  remoteData?: boolean | undefined;
  /**
   * Set to get the number of records.
   */
  limit?: number | undefined;
  /**
   * Set to get the number of records after this cursor.
   */
  cursor?: string | undefined;
};

export type ListMarketingautomationListsResponseBody = {
  prevCursor: string | null;
  nextCursor: string | null;
  data: Array<components.UnifiedMarketingautomationListOutput>;
};

export type ListMarketingautomationListsResponse = {
  result: ListMarketingautomationListsResponseBody;
};

/** @internal */
export const ListMarketingautomationListsRequest$inboundSchema: z.ZodType<
  ListMarketingautomationListsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
  });
});

/** @internal */
export type ListMarketingautomationListsRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const ListMarketingautomationListsRequest$outboundSchema: z.ZodType<
  ListMarketingautomationListsRequest$Outbound,
  z.ZodTypeDef,
  ListMarketingautomationListsRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMarketingautomationListsRequest$ {
  /** @deprecated use `ListMarketingautomationListsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListMarketingautomationListsRequest$inboundSchema;
  /** @deprecated use `ListMarketingautomationListsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListMarketingautomationListsRequest$outboundSchema;
  /** @deprecated use `ListMarketingautomationListsRequest$Outbound` instead. */
  export type Outbound = ListMarketingautomationListsRequest$Outbound;
}

export function listMarketingautomationListsRequestToJSON(
  listMarketingautomationListsRequest: ListMarketingautomationListsRequest,
): string {
  return JSON.stringify(
    ListMarketingautomationListsRequest$outboundSchema.parse(
      listMarketingautomationListsRequest,
    ),
  );
}

export function listMarketingautomationListsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListMarketingautomationListsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListMarketingautomationListsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMarketingautomationListsRequest' from JSON`,
  );
}

/** @internal */
export const ListMarketingautomationListsResponseBody$inboundSchema: z.ZodType<
  ListMarketingautomationListsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prev_cursor: z.nullable(z.string()),
  next_cursor: z.nullable(z.string()),
  data: z.array(components.UnifiedMarketingautomationListOutput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "prev_cursor": "prevCursor",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListMarketingautomationListsResponseBody$Outbound = {
  prev_cursor: string | null;
  next_cursor: string | null;
  data: Array<components.UnifiedMarketingautomationListOutput$Outbound>;
};

/** @internal */
export const ListMarketingautomationListsResponseBody$outboundSchema: z.ZodType<
  ListMarketingautomationListsResponseBody$Outbound,
  z.ZodTypeDef,
  ListMarketingautomationListsResponseBody
> = z.object({
  prevCursor: z.nullable(z.string()),
  nextCursor: z.nullable(z.string()),
  data: z.array(components.UnifiedMarketingautomationListOutput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    prevCursor: "prev_cursor",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMarketingautomationListsResponseBody$ {
  /** @deprecated use `ListMarketingautomationListsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ListMarketingautomationListsResponseBody$inboundSchema;
  /** @deprecated use `ListMarketingautomationListsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ListMarketingautomationListsResponseBody$outboundSchema;
  /** @deprecated use `ListMarketingautomationListsResponseBody$Outbound` instead. */
  export type Outbound = ListMarketingautomationListsResponseBody$Outbound;
}

export function listMarketingautomationListsResponseBodyToJSON(
  listMarketingautomationListsResponseBody:
    ListMarketingautomationListsResponseBody,
): string {
  return JSON.stringify(
    ListMarketingautomationListsResponseBody$outboundSchema.parse(
      listMarketingautomationListsResponseBody,
    ),
  );
}

export function listMarketingautomationListsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ListMarketingautomationListsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListMarketingautomationListsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListMarketingautomationListsResponseBody' from JSON`,
  );
}

/** @internal */
export const ListMarketingautomationListsResponse$inboundSchema: z.ZodType<
  ListMarketingautomationListsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListMarketingautomationListsResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListMarketingautomationListsResponse$Outbound = {
  Result: ListMarketingautomationListsResponseBody$Outbound;
};

/** @internal */
export const ListMarketingautomationListsResponse$outboundSchema: z.ZodType<
  ListMarketingautomationListsResponse$Outbound,
  z.ZodTypeDef,
  ListMarketingautomationListsResponse
> = z.object({
  result: z.lazy(() => ListMarketingautomationListsResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMarketingautomationListsResponse$ {
  /** @deprecated use `ListMarketingautomationListsResponse$inboundSchema` instead. */
  export const inboundSchema =
    ListMarketingautomationListsResponse$inboundSchema;
  /** @deprecated use `ListMarketingautomationListsResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListMarketingautomationListsResponse$outboundSchema;
  /** @deprecated use `ListMarketingautomationListsResponse$Outbound` instead. */
  export type Outbound = ListMarketingautomationListsResponse$Outbound;
}

export function listMarketingautomationListsResponseToJSON(
  listMarketingautomationListsResponse: ListMarketingautomationListsResponse,
): string {
  return JSON.stringify(
    ListMarketingautomationListsResponse$outboundSchema.parse(
      listMarketingautomationListsResponse,
    ),
  );
}

export function listMarketingautomationListsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListMarketingautomationListsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListMarketingautomationListsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMarketingautomationListsResponse' from JSON`,
  );
}
