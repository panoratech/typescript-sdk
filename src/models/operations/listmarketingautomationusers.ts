/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListMarketingAutomationUsersRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original software.
   */
  remoteData?: boolean | undefined;
  /**
   * Set to get the number of records.
   */
  limit?: number | undefined;
  /**
   * Set to get the number of records after this cursor.
   */
  cursor?: string | undefined;
};

export type ListMarketingAutomationUsersResponseBody = {
  prevCursor: string | null;
  nextCursor: string | null;
  data: Array<components.UnifiedMarketingautomationUserOutput>;
};

export type ListMarketingAutomationUsersResponse = {
  result: ListMarketingAutomationUsersResponseBody;
};

/** @internal */
export const ListMarketingAutomationUsersRequest$inboundSchema: z.ZodType<
  ListMarketingAutomationUsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
  });
});

/** @internal */
export type ListMarketingAutomationUsersRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const ListMarketingAutomationUsersRequest$outboundSchema: z.ZodType<
  ListMarketingAutomationUsersRequest$Outbound,
  z.ZodTypeDef,
  ListMarketingAutomationUsersRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMarketingAutomationUsersRequest$ {
  /** @deprecated use `ListMarketingAutomationUsersRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListMarketingAutomationUsersRequest$inboundSchema;
  /** @deprecated use `ListMarketingAutomationUsersRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListMarketingAutomationUsersRequest$outboundSchema;
  /** @deprecated use `ListMarketingAutomationUsersRequest$Outbound` instead. */
  export type Outbound = ListMarketingAutomationUsersRequest$Outbound;
}

export function listMarketingAutomationUsersRequestToJSON(
  listMarketingAutomationUsersRequest: ListMarketingAutomationUsersRequest,
): string {
  return JSON.stringify(
    ListMarketingAutomationUsersRequest$outboundSchema.parse(
      listMarketingAutomationUsersRequest,
    ),
  );
}

export function listMarketingAutomationUsersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListMarketingAutomationUsersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListMarketingAutomationUsersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMarketingAutomationUsersRequest' from JSON`,
  );
}

/** @internal */
export const ListMarketingAutomationUsersResponseBody$inboundSchema: z.ZodType<
  ListMarketingAutomationUsersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prev_cursor: z.nullable(z.string()),
  next_cursor: z.nullable(z.string()),
  data: z.array(components.UnifiedMarketingautomationUserOutput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "prev_cursor": "prevCursor",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListMarketingAutomationUsersResponseBody$Outbound = {
  prev_cursor: string | null;
  next_cursor: string | null;
  data: Array<components.UnifiedMarketingautomationUserOutput$Outbound>;
};

/** @internal */
export const ListMarketingAutomationUsersResponseBody$outboundSchema: z.ZodType<
  ListMarketingAutomationUsersResponseBody$Outbound,
  z.ZodTypeDef,
  ListMarketingAutomationUsersResponseBody
> = z.object({
  prevCursor: z.nullable(z.string()),
  nextCursor: z.nullable(z.string()),
  data: z.array(components.UnifiedMarketingautomationUserOutput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    prevCursor: "prev_cursor",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMarketingAutomationUsersResponseBody$ {
  /** @deprecated use `ListMarketingAutomationUsersResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ListMarketingAutomationUsersResponseBody$inboundSchema;
  /** @deprecated use `ListMarketingAutomationUsersResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ListMarketingAutomationUsersResponseBody$outboundSchema;
  /** @deprecated use `ListMarketingAutomationUsersResponseBody$Outbound` instead. */
  export type Outbound = ListMarketingAutomationUsersResponseBody$Outbound;
}

export function listMarketingAutomationUsersResponseBodyToJSON(
  listMarketingAutomationUsersResponseBody:
    ListMarketingAutomationUsersResponseBody,
): string {
  return JSON.stringify(
    ListMarketingAutomationUsersResponseBody$outboundSchema.parse(
      listMarketingAutomationUsersResponseBody,
    ),
  );
}

export function listMarketingAutomationUsersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  ListMarketingAutomationUsersResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListMarketingAutomationUsersResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListMarketingAutomationUsersResponseBody' from JSON`,
  );
}

/** @internal */
export const ListMarketingAutomationUsersResponse$inboundSchema: z.ZodType<
  ListMarketingAutomationUsersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListMarketingAutomationUsersResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListMarketingAutomationUsersResponse$Outbound = {
  Result: ListMarketingAutomationUsersResponseBody$Outbound;
};

/** @internal */
export const ListMarketingAutomationUsersResponse$outboundSchema: z.ZodType<
  ListMarketingAutomationUsersResponse$Outbound,
  z.ZodTypeDef,
  ListMarketingAutomationUsersResponse
> = z.object({
  result: z.lazy(() => ListMarketingAutomationUsersResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMarketingAutomationUsersResponse$ {
  /** @deprecated use `ListMarketingAutomationUsersResponse$inboundSchema` instead. */
  export const inboundSchema =
    ListMarketingAutomationUsersResponse$inboundSchema;
  /** @deprecated use `ListMarketingAutomationUsersResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListMarketingAutomationUsersResponse$outboundSchema;
  /** @deprecated use `ListMarketingAutomationUsersResponse$Outbound` instead. */
  export type Outbound = ListMarketingAutomationUsersResponse$Outbound;
}

export function listMarketingAutomationUsersResponseToJSON(
  listMarketingAutomationUsersResponse: ListMarketingAutomationUsersResponse,
): string {
  return JSON.stringify(
    ListMarketingAutomationUsersResponse$outboundSchema.parse(
      listMarketingAutomationUsersResponse,
    ),
  );
}

export function listMarketingAutomationUsersResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListMarketingAutomationUsersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListMarketingAutomationUsersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMarketingAutomationUsersResponse' from JSON`,
  );
}
