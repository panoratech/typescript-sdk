/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAccountingTransactionRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original software.
   */
  remoteData?: boolean | undefined;
  /**
   * Set to get the number of records.
   */
  limit?: number | undefined;
  /**
   * Set to get the number of records after this cursor.
   */
  cursor?: string | undefined;
};

export type ListAccountingTransactionResponseBody = {
  prevCursor: string | null;
  nextCursor: string | null;
  data: Array<components.UnifiedAccountingTransactionOutput>;
};

export type ListAccountingTransactionResponse = {
  result: ListAccountingTransactionResponseBody;
};

/** @internal */
export const ListAccountingTransactionRequest$inboundSchema: z.ZodType<
  ListAccountingTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
  });
});

/** @internal */
export type ListAccountingTransactionRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const ListAccountingTransactionRequest$outboundSchema: z.ZodType<
  ListAccountingTransactionRequest$Outbound,
  z.ZodTypeDef,
  ListAccountingTransactionRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountingTransactionRequest$ {
  /** @deprecated use `ListAccountingTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = ListAccountingTransactionRequest$inboundSchema;
  /** @deprecated use `ListAccountingTransactionRequest$outboundSchema` instead. */
  export const outboundSchema = ListAccountingTransactionRequest$outboundSchema;
  /** @deprecated use `ListAccountingTransactionRequest$Outbound` instead. */
  export type Outbound = ListAccountingTransactionRequest$Outbound;
}

export function listAccountingTransactionRequestToJSON(
  listAccountingTransactionRequest: ListAccountingTransactionRequest,
): string {
  return JSON.stringify(
    ListAccountingTransactionRequest$outboundSchema.parse(
      listAccountingTransactionRequest,
    ),
  );
}

export function listAccountingTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountingTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAccountingTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountingTransactionRequest' from JSON`,
  );
}

/** @internal */
export const ListAccountingTransactionResponseBody$inboundSchema: z.ZodType<
  ListAccountingTransactionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prev_cursor: z.nullable(z.string()),
  next_cursor: z.nullable(z.string()),
  data: z.array(components.UnifiedAccountingTransactionOutput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "prev_cursor": "prevCursor",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListAccountingTransactionResponseBody$Outbound = {
  prev_cursor: string | null;
  next_cursor: string | null;
  data: Array<components.UnifiedAccountingTransactionOutput$Outbound>;
};

/** @internal */
export const ListAccountingTransactionResponseBody$outboundSchema: z.ZodType<
  ListAccountingTransactionResponseBody$Outbound,
  z.ZodTypeDef,
  ListAccountingTransactionResponseBody
> = z.object({
  prevCursor: z.nullable(z.string()),
  nextCursor: z.nullable(z.string()),
  data: z.array(components.UnifiedAccountingTransactionOutput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    prevCursor: "prev_cursor",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountingTransactionResponseBody$ {
  /** @deprecated use `ListAccountingTransactionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    ListAccountingTransactionResponseBody$inboundSchema;
  /** @deprecated use `ListAccountingTransactionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ListAccountingTransactionResponseBody$outboundSchema;
  /** @deprecated use `ListAccountingTransactionResponseBody$Outbound` instead. */
  export type Outbound = ListAccountingTransactionResponseBody$Outbound;
}

export function listAccountingTransactionResponseBodyToJSON(
  listAccountingTransactionResponseBody: ListAccountingTransactionResponseBody,
): string {
  return JSON.stringify(
    ListAccountingTransactionResponseBody$outboundSchema.parse(
      listAccountingTransactionResponseBody,
    ),
  );
}

export function listAccountingTransactionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountingTransactionResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListAccountingTransactionResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountingTransactionResponseBody' from JSON`,
  );
}

/** @internal */
export const ListAccountingTransactionResponse$inboundSchema: z.ZodType<
  ListAccountingTransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListAccountingTransactionResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListAccountingTransactionResponse$Outbound = {
  Result: ListAccountingTransactionResponseBody$Outbound;
};

/** @internal */
export const ListAccountingTransactionResponse$outboundSchema: z.ZodType<
  ListAccountingTransactionResponse$Outbound,
  z.ZodTypeDef,
  ListAccountingTransactionResponse
> = z.object({
  result: z.lazy(() => ListAccountingTransactionResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountingTransactionResponse$ {
  /** @deprecated use `ListAccountingTransactionResponse$inboundSchema` instead. */
  export const inboundSchema = ListAccountingTransactionResponse$inboundSchema;
  /** @deprecated use `ListAccountingTransactionResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListAccountingTransactionResponse$outboundSchema;
  /** @deprecated use `ListAccountingTransactionResponse$Outbound` instead. */
  export type Outbound = ListAccountingTransactionResponse$Outbound;
}

export function listAccountingTransactionResponseToJSON(
  listAccountingTransactionResponse: ListAccountingTransactionResponse,
): string {
  return JSON.stringify(
    ListAccountingTransactionResponse$outboundSchema.parse(
      listAccountingTransactionResponse,
    ),
  );
}

export function listAccountingTransactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountingTransactionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAccountingTransactionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountingTransactionResponse' from JSON`,
  );
}
